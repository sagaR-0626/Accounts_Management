{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VivekReddyMeka\\\\Desktop\\\\Accounts_Management\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Route, Routes, useLocation, useNavigate } from 'react-router-dom';\nimport Loginscreen from './Components/Loginscreen';\nimport OrganizationSelector from './Components/OrganizationSelector';\nimport Dashboard from './Components/Dashboard';\nimport ARAPBreakdown from './Components/ARAPBreakdown';\nimport CompanyDashboard from './Components/CompanyDashboard';\nimport ProjectDashboard from './Components/ProjectDashboard';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Loginscreen, {\n      onLogin: () => setIsLoggedIn(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(Dashboard, {\n        isLoggedIn: isLoggedIn,\n        onLogout: () => setIsLoggedIn(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/arap-breakdown\",\n      element: /*#__PURE__*/_jsxDEV(ARAPBreakdown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/company-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(CompanyDashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 49\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/project/:id\",\n      element: /*#__PURE__*/_jsxDEV(ProjectDashboardWrapper, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 43\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n// Wrapper to get state from navigation\n_s(App, \"g0MSgNVZk+vKiEFnDJ9VPEfswFA=\");\n_c = App;\nfunction ProjectDashboardWrapper() {\n  _s2();\n  const location = useLocation();\n  const navigate = useNavigate(); // <-- Add this\n  const {\n    project,\n    organization\n  } = location.state || {};\n  return /*#__PURE__*/_jsxDEV(ProjectDashboard, {\n    project: project,\n    organization: organization,\n    onBack: () => navigate('/company-dashboard') // <-- Use navigate here\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s2(ProjectDashboardWrapper, \"ZmJpvzBBf8J7VCgSKqUUk0eHjAY=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c2 = ProjectDashboardWrapper;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ProjectDashboardWrapper\");","map":{"version":3,"names":["React","useState","Route","Routes","useLocation","useNavigate","Loginscreen","OrganizationSelector","Dashboard","ARAPBreakdown","CompanyDashboard","ProjectDashboard","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","children","path","element","onLogout","ProjectDashboardWrapper","_c","_s2","location","navigate","project","organization","state","onBack","_c2","$RefreshReg$"],"sources":["C:/Users/VivekReddyMeka/Desktop/Accounts_Management/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Route, Routes, useLocation, useNavigate } from 'react-router-dom';\r\nimport Loginscreen from './Components/Loginscreen';\r\nimport OrganizationSelector from './Components/OrganizationSelector';\r\nimport Dashboard from './Components/Dashboard';\r\nimport ARAPBreakdown from './Components/ARAPBreakdown';\r\nimport CompanyDashboard from './Components/CompanyDashboard';\r\nimport ProjectDashboard from './Components/ProjectDashboard';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  if (!isLoggedIn) {\r\n    return <Loginscreen onLogin={() => setIsLoggedIn(true)} />;\r\n  }\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Dashboard isLoggedIn={isLoggedIn} onLogout={() => setIsLoggedIn(false)} />} />\r\n      <Route path=\"/arap-breakdown\" element={<ARAPBreakdown />} />\r\n      <Route path=\"/company-dashboard\" element={<CompanyDashboard />} />\r\n      <Route path=\"/project/:id\" element={<ProjectDashboardWrapper />} />\r\n    </Routes>\r\n  );\r\n}\r\n\r\n// Wrapper to get state from navigation\r\nfunction ProjectDashboardWrapper() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate(); // <-- Add this\r\n  const { project, organization } = location.state || {};\r\n  return (\r\n    <ProjectDashboard\r\n      project={project}\r\n      organization={organization}\r\n      onBack={() => navigate('/company-dashboard')} // <-- Use navigate here\r\n    />\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}