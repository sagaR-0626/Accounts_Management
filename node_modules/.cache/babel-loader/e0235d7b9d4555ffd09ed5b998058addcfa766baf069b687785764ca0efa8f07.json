{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VivekReddyMeka\\\\Desktop\\\\Accounts_Management\\\\src\\\\Components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Building2, Code } from 'lucide-react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport OrganizationSelector from './OrganizationSelector';\nimport CompanyDashboard from './CompanyDashboard';\nimport ProjectDashboard from './ProjectDashboard';\nimport Header from './Header';\nimport '../Styles/Dashboard.css';\nimport * as XLSX from 'xlsx';\nimport Papa from 'papaparse';\nimport { calculateDashboardMetrics, getBreakdownByCategory } from '../utils/Calculations';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = 'http://localhost:3001';\nconst dbFields = ['OrganizationID', 'OrgName', 'TxnID', 'TxnDate', 'Category', 'Item', 'Type', 'Amount', 'ProjectID', 'ProjectName'];\nconst DashboardCard = ({\n  title,\n  value,\n  color,\n  onClick\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    flex: '1 1 0',\n    background: color,\n    color: '#fff',\n    borderRadius: 12,\n    padding: '32px 24px',\n    textAlign: 'center',\n    boxShadow: '0 2px 8px #0002',\n    minWidth: 200,\n    fontSize: 20,\n    cursor: onClick ? 'pointer' : 'default'\n  },\n  onClick: onClick,\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: 18,\n      marginBottom: 8\n    },\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: 32,\n      fontWeight: 700\n    },\n    children: title === 'Net Margin (%)' ? `${value}%` : `â‚¹${Number(value).toLocaleString()}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this);\n_c = DashboardCard;\nconst BreakdownModal = ({\n  type,\n  breakdown,\n  onClose\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100vw',\n    height: '100vh',\n    background: '#0007',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 9999\n  },\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#fff',\n      borderRadius: 10,\n      padding: 32,\n      minWidth: 400\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [type.charAt(0).toUpperCase() + type.slice(1), \" Breakdown by Category\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      style: {\n        width: '100%',\n        marginTop: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Object.entries(breakdown).map(([cat, amt]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: cat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"\\u20B9\", amt.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, cat, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: 24\n      },\n      onClick: onClose,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 44,\n  columnNumber: 3\n}, this);\n_c2 = BreakdownModal;\nconst Dashboard = ({\n  isLoggedIn,\n  onLogout\n}) => {\n  _s();\n  var _location$state, _location$state2;\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.userEmail) || '';\n  const organizationId = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.organizationId) || null;\n  const navigate = useNavigate();\n\n  // --- State declarations ---\n  const [view, setView] = useState(() => localStorage.getItem('dashboardView') || 'organizations');\n  const [selectedOrg, setSelectedOrg] = useState(() => {\n    const org = localStorage.getItem('selectedOrg');\n    return org ? JSON.parse(org) : null;\n  });\n  const [selectedDept, setSelectedDept] = useState(() => localStorage.getItem('selectedDept') || 'all');\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [rawProjects, setRawProjects] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [showNewProjectForm, setShowNewProjectForm] = useState(false);\n\n  // --- Excel/DB Import states ---\n  const [excelData, setExcelData] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [columnMap, setColumnMap] = useState({});\n  const [uploadFileName, setUploadFileName] = useState('');\n  const [importedRows, setImportedRows] = useState([]);\n  const [projectsFromDB, setProjectsFromDB] = useState([]);\n  const [step, setStep] = useState(1);\n\n  // --- Modal state for breakdown ---\n  const [modalView, setModalView] = useState(null); // 'ar', 'ap', 'profit', 'loss', null\n\n  // --- Load organizations ---\n  useEffect(() => {\n    const loadOrgs = async () => {\n      try {\n        const res = await fetch(`${API_BASE}/organizations`);\n        const data = await res.json();\n        const mapped = data.map(o => ({\n          id: o.OrganizationID,\n          name: o.Name,\n          type: o.Type || '',\n          description: o.Description || '',\n          icon: o.Name && o.Name.toLowerCase().includes('collabridge') ? Code : Building2,\n          color: o.Name && o.Name.toLowerCase().includes('la tierra') ? '#10b981' : '#3b82f6'\n        }));\n        setOrganizations(mapped);\n      } catch (err) {\n        console.error('Error loading organizations:', err);\n      }\n    };\n    loadOrgs();\n  }, []);\n\n  // --- Organization selection ---\n  const handleOrgSelect = async orgId => {\n    setSelectedDept('all');\n    setSelectedProject(null);\n    setView('dashboard');\n    setStep(1);\n    try {\n      var _organizations$find, _organizations$find2, _organizations$find3, _organizations$find4, _organizations$find5;\n      const orgRes = await fetch(`${API_BASE}/organizations/${orgId}`);\n      const orgData = await orgRes.json();\n      const projRes = await fetch(`${API_BASE}/projects?organizationId=${orgId}`);\n      const projRows = await projRes.json();\n      const deptRes = await fetch(`${API_BASE}/departments?organizationId=${orgId}`);\n      const deptRows = await deptRes.json();\n      const mappedProjects = (projRows || []).map(p => {\n        var _ref, _p$Budget, _ref2, _p$Spending, _ref3, _p$Budget2, _ref4, _p$Spending2, _ref5, _p$AR, _ref6, _p$AP, _ref7, _p$Spending3, _ref8, _p$Team;\n        return {\n          id: p.ProjectID || p.ProjectId || p.id,\n          name: p.ProjectName || p.Name || p.name || '',\n          status: (p.Status || p.status || '').toString(),\n          budget: Number((_ref = (_p$Budget = p.Budget) !== null && _p$Budget !== void 0 ? _p$Budget : p.budget) !== null && _ref !== void 0 ? _ref : 0),\n          spent: Number((_ref2 = (_p$Spending = p.Spending) !== null && _p$Spending !== void 0 ? _p$Spending : p.spent) !== null && _ref2 !== void 0 ? _ref2 : 0),\n          profit: Number(p.Profit !== undefined ? p.Profit : Number((_ref3 = (_p$Budget2 = p.Budget) !== null && _p$Budget2 !== void 0 ? _p$Budget2 : p.budget) !== null && _ref3 !== void 0 ? _ref3 : 0) - Number((_ref4 = (_p$Spending2 = p.Spending) !== null && _p$Spending2 !== void 0 ? _p$Spending2 : p.spent) !== null && _ref4 !== void 0 ? _ref4 : 0)),\n          ar: Number((_ref5 = (_p$AR = p.AR) !== null && _p$AR !== void 0 ? _p$AR : p.ar) !== null && _ref5 !== void 0 ? _ref5 : 0),\n          ap: Number((_ref6 = (_p$AP = p.AP) !== null && _p$AP !== void 0 ? _p$AP : p.ap) !== null && _ref6 !== void 0 ? _ref6 : Number((_ref7 = (_p$Spending3 = p.Spending) !== null && _p$Spending3 !== void 0 ? _p$Spending3 : p.spent) !== null && _ref7 !== void 0 ? _ref7 : 0)),\n          team: Number((_ref8 = (_p$Team = p.Team) !== null && _p$Team !== void 0 ? _p$Team : p.team) !== null && _ref8 !== void 0 ? _ref8 : 0),\n          deadline: p.EndDate || p.deadline || '',\n          departmentName: p.DepartmentName || p.departmentName || '',\n          transactions: p.transactions || [] // If you have transactions per project\n        };\n      });\n      setRawProjects(mappedProjects);\n      setSelectedOrg({\n        id: orgData.OrganizationID || orgId,\n        name: orgData.Name && orgData.Name.trim() ? orgData.Name : ((_organizations$find = organizations.find(o => o.id === orgId)) === null || _organizations$find === void 0 ? void 0 : _organizations$find.name) || '',\n        type: orgData.Type && orgData.Type.trim() ? orgData.Type : ((_organizations$find2 = organizations.find(o => o.id === orgId)) === null || _organizations$find2 === void 0 ? void 0 : _organizations$find2.type) || '',\n        description: orgData.Description && orgData.Description.trim() ? orgData.Description : ((_organizations$find3 = organizations.find(o => o.id === orgId)) === null || _organizations$find3 === void 0 ? void 0 : _organizations$find3.description) || '',\n        projects: mappedProjects,\n        color: ((_organizations$find4 = organizations.find(o => o.id === orgId)) === null || _organizations$find4 === void 0 ? void 0 : _organizations$find4.color) || '#3b82f6',\n        icon: ((_organizations$find5 = organizations.find(o => o.id === orgId)) === null || _organizations$find5 === void 0 ? void 0 : _organizations$find5.icon) || Building2\n      });\n      localStorage.setItem('selectedOrg', JSON.stringify(orgData));\n      setDepartments((deptRows || []).map(d => ({\n        id: d.DepartmentID,\n        name: d.Name\n      })));\n    } catch (err) {\n      console.error('Error selecting organization:', err);\n    }\n  };\n\n  // --- Excel Upload & Direct Import ---\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    setUploadFileName(file.name);\n    let rows = [];\n    if (file.name.endsWith('.csv')) {\n      await new Promise((resolve, reject) => {\n        Papa.parse(file, {\n          header: true,\n          skipEmptyLines: true,\n          complete: results => {\n            rows = results.data;\n            resolve();\n          },\n          error: reject\n        });\n      });\n    } else {\n      const data = await new Promise(resolve => {\n        const reader = new FileReader();\n        reader.onload = evt => resolve(evt.target.result);\n        reader.readAsBinaryString(file);\n      });\n      const workbook = XLSX.read(data, {\n        type: 'binary'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      rows = XLSX.utils.sheet_to_json(sheet, {\n        defval: ''\n      });\n    }\n\n    // Default columnMap: each field maps to itself\n    const columnMap = {\n      OrganizationID: 'Org Id',\n      OrgName: 'Org name',\n      TxnID: 'TxnID',\n      TxnDate: 'TxnDate',\n      Category: 'Category',\n      Item: 'Item',\n      Type: 'ExpenseType',\n      Amount: 'Amount',\n      ProjectID: 'ProjectID',\n      ProjectName: 'ProjectName'\n    };\n    await fetch(`${API_BASE}/import-transactions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        rows,\n        uploaderEmail: userEmail,\n        fileName: file.name,\n        organizationId: (selectedOrg === null || selectedOrg === void 0 ? void 0 : selectedOrg.id) || null,\n        columnMap\n      })\n    });\n\n    // Fetch imported transactions and project financials from DB\n    const importedRes = await fetch(`${API_BASE}/imported-transactions`);\n    const imported = await importedRes.json();\n    setImportedRows(imported);\n    localStorage.setItem('importedRows', JSON.stringify(imported));\n    const projFinRes = await fetch(`${API_BASE}/project-financials`);\n    const projFin = await projFinRes.json();\n    setProjectsFromDB(Array.isArray(projFin) ? projFin : []);\n  };\n\n  // --- Use calculation logic for dashboard metrics ---\n  const dashboardMetrics = calculateDashboardMetrics(importedRows);\n\n  // --- Project selection handler ---\n  const handleProjectSelect = project => {\n    setSelectedProject(project);\n    setView('project');\n  };\n\n  // --- Build projects with transactions from importedRows ---\n  useEffect(() => {\n    // Group transactions by ProjectID\n    const txByProject = {};\n    importedRows.forEach(tx => {\n      const pid = tx.ProjectID || tx.ProjectId || tx.projectId || '';\n      if (!txByProject[pid]) txByProject[pid] = [];\n      txByProject[pid].push(tx);\n    });\n\n    // Map projectsFromDB with transactions, budget, spent, etc.\n    const normalizedProjects = (projectsFromDB || []).map(p => {\n      var _ref9, _p$Budget3, _ref0, _p$Spending4, _ref1, _p$Budget4, _ref10, _p$Spending5, _ref11, _p$AR2, _ref12, _p$AP2, _ref13, _p$Spending6, _ref14, _p$Team2;\n      return {\n        id: p.ProjectID || p.ProjectId || p.id,\n        name: p.ProjectName || p.Name || p.name || '',\n        status: (p.Status || p.status || '').toString(),\n        budget: Number((_ref9 = (_p$Budget3 = p.Budget) !== null && _p$Budget3 !== void 0 ? _p$Budget3 : p.budget) !== null && _ref9 !== void 0 ? _ref9 : 0),\n        spent: Number((_ref0 = (_p$Spending4 = p.Spending) !== null && _p$Spending4 !== void 0 ? _p$Spending4 : p.spent) !== null && _ref0 !== void 0 ? _ref0 : 0),\n        profit: Number(p.Profit !== undefined ? p.Profit : Number((_ref1 = (_p$Budget4 = p.Budget) !== null && _p$Budget4 !== void 0 ? _p$Budget4 : p.budget) !== null && _ref1 !== void 0 ? _ref1 : 0) - Number((_ref10 = (_p$Spending5 = p.Spending) !== null && _p$Spending5 !== void 0 ? _p$Spending5 : p.spent) !== null && _ref10 !== void 0 ? _ref10 : 0)),\n        ar: Number((_ref11 = (_p$AR2 = p.AR) !== null && _p$AR2 !== void 0 ? _p$AR2 : p.ar) !== null && _ref11 !== void 0 ? _ref11 : 0),\n        ap: Number((_ref12 = (_p$AP2 = p.AP) !== null && _p$AP2 !== void 0 ? _p$AP2 : p.ap) !== null && _ref12 !== void 0 ? _ref12 : Number((_ref13 = (_p$Spending6 = p.Spending) !== null && _p$Spending6 !== void 0 ? _p$Spending6 : p.spent) !== null && _ref13 !== void 0 ? _ref13 : 0)),\n        team: Number((_ref14 = (_p$Team2 = p.Team) !== null && _p$Team2 !== void 0 ? _p$Team2 : p.team) !== null && _ref14 !== void 0 ? _ref14 : 0),\n        deadline: p.EndDate || p.deadline || '',\n        departmentName: p.DepartmentName || p.departmentName || '',\n        transactions: txByProject[p.ProjectID || p.ProjectId || p.id] || []\n      };\n    });\n    setRawProjects(normalizedProjects);\n  }, [importedRows, projectsFromDB]);\n\n  // --- Restore state from localStorage ---\n  useEffect(() => {\n    // Restore importedRows from localStorage if present\n    const savedRows = localStorage.getItem('importedRows');\n    if (savedRows) {\n      setImportedRows(JSON.parse(savedRows));\n    }\n    // Restore selectedOrg from localStorage if present\n    const savedOrg = localStorage.getItem('selectedOrg');\n    if (savedOrg) {\n      setSelectedOrg(JSON.parse(savedOrg));\n    }\n  }, []);\n\n  // --- UI ---\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      isLoggedIn: isLoggedIn,\n      onLogout: onLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), view === 'organizations' && /*#__PURE__*/_jsxDEV(OrganizationSelector, {\n      organizations: organizations,\n      onSelect: handleOrgSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }, this), view === 'project' && selectedProject && /*#__PURE__*/_jsxDEV(ProjectDashboard, {\n      project: selectedProject,\n      organization: selectedOrg,\n      onBack: () => setView('dashboard')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }, this), view === 'dashboard' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100vw',\n        minHeight: '100vh',\n        padding: '20px',\n        background: '#f5f5f5',\n        boxSizing: 'border-box'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          maxWidth: 'none',\n          margin: '0',\n          padding: '24px',\n          background: '#fff',\n          borderRadius: '10px',\n          boxShadow: '0 4px 24px rgba(0,0,0,0.1)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Accounts Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 40\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Upload Excel/CSV to import transactions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".xlsx,.xls,.csv\",\n            onChange: handleFileUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), modalView && /*#__PURE__*/_jsxDEV(BreakdownModal, {\n          type: modalView,\n          breakdown: getBreakdownByCategory(importedRows, modalView),\n          onClose: () => setModalView(null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CompanyDashboard, {\n          organization: selectedOrg,\n          selectedDept: selectedDept,\n          onDeptChange: setSelectedDept,\n          onProjectSelect: handleProjectSelect,\n          onAddProject: setShowNewProjectForm,\n          onFileUpload: handleFileUpload,\n          onBack: () => setView('organizations'),\n          projects: rawProjects // <-- FIXED: use normalized projects with transactions\n          ,\n          totals: dashboardMetrics\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Dashboard, \"+nEGi92ii/M0mhyGSH/uJiPppog=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c3 = Dashboard;\nexport default Dashboard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"DashboardCard\");\n$RefreshReg$(_c2, \"BreakdownModal\");\n$RefreshReg$(_c3, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Building2","Code","useNavigate","useLocation","OrganizationSelector","CompanyDashboard","ProjectDashboard","Header","XLSX","Papa","calculateDashboardMetrics","getBreakdownByCategory","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","dbFields","DashboardCard","title","value","color","onClick","style","flex","background","borderRadius","padding","textAlign","boxShadow","minWidth","fontSize","cursor","children","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","Number","toLocaleString","_c","BreakdownModal","type","breakdown","onClose","position","top","left","width","height","display","alignItems","justifyContent","zIndex","charAt","toUpperCase","slice","marginTop","Object","entries","map","cat","amt","_c2","Dashboard","isLoggedIn","onLogout","_s","_location$state","_location$state2","location","userEmail","state","organizationId","navigate","view","setView","localStorage","getItem","selectedOrg","setSelectedOrg","org","JSON","parse","selectedDept","setSelectedDept","selectedProject","setSelectedProject","organizations","setOrganizations","rawProjects","setRawProjects","departments","setDepartments","showNewProjectForm","setShowNewProjectForm","excelData","setExcelData","excelColumns","setExcelColumns","columnMap","setColumnMap","uploadFileName","setUploadFileName","importedRows","setImportedRows","projectsFromDB","setProjectsFromDB","step","setStep","modalView","setModalView","loadOrgs","res","fetch","data","json","mapped","o","id","OrganizationID","name","Name","Type","description","Description","icon","toLowerCase","includes","err","console","error","handleOrgSelect","orgId","_organizations$find","_organizations$find2","_organizations$find3","_organizations$find4","_organizations$find5","orgRes","orgData","projRes","projRows","deptRes","deptRows","mappedProjects","p","_ref","_p$Budget","_ref2","_p$Spending","_ref3","_p$Budget2","_ref4","_p$Spending2","_ref5","_p$AR","_ref6","_p$AP","_ref7","_p$Spending3","_ref8","_p$Team","ProjectID","ProjectId","ProjectName","status","Status","toString","budget","Budget","spent","Spending","profit","Profit","undefined","ar","AR","ap","AP","team","Team","deadline","EndDate","departmentName","DepartmentName","transactions","trim","find","projects","setItem","stringify","d","DepartmentID","handleFileUpload","e","file","target","files","rows","endsWith","Promise","resolve","reject","header","skipEmptyLines","complete","results","reader","FileReader","onload","evt","result","readAsBinaryString","workbook","read","sheetName","SheetNames","sheet","Sheets","utils","sheet_to_json","defval","OrgName","TxnID","TxnDate","Category","Item","Amount","method","headers","body","uploaderEmail","importedRes","imported","projFinRes","projFin","Array","isArray","dashboardMetrics","handleProjectSelect","project","txByProject","forEach","tx","pid","projectId","push","normalizedProjects","_ref9","_p$Budget3","_ref0","_p$Spending4","_ref1","_p$Budget4","_ref10","_p$Spending5","_ref11","_p$AR2","_ref12","_p$AP2","_ref13","_p$Spending6","_ref14","_p$Team2","savedRows","savedOrg","onSelect","organization","onBack","minHeight","boxSizing","maxWidth","margin","accept","onChange","onDeptChange","onProjectSelect","onAddProject","onFileUpload","totals","_c3","$RefreshReg$"],"sources":["C:/Users/VivekReddyMeka/Desktop/Accounts_Management/src/Components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Building2, Code } from 'lucide-react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport OrganizationSelector from './OrganizationSelector';\r\nimport CompanyDashboard from './CompanyDashboard';\r\nimport ProjectDashboard from './ProjectDashboard';\r\nimport Header from './Header';\r\nimport '../Styles/Dashboard.css';\r\nimport * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport { calculateDashboardMetrics, getBreakdownByCategory } from '../utils/Calculations';\r\n\r\nconst API_BASE = 'http://localhost:3001';\r\nconst dbFields = [\r\n  'OrganizationID', 'OrgName', 'TxnID', 'TxnDate', 'Category', 'Item', 'Type', 'Amount', 'ProjectID', 'ProjectName'\r\n];\r\n\r\nconst DashboardCard = ({ title, value, color, onClick }) => (\r\n  <div\r\n    style={{\r\n      flex: '1 1 0',\r\n      background: color,\r\n      color: '#fff',\r\n      borderRadius: 12,\r\n      padding: '32px 24px',\r\n      textAlign: 'center',\r\n      boxShadow: '0 2px 8px #0002',\r\n      minWidth: 200,\r\n      fontSize: 20,\r\n      cursor: onClick ? 'pointer' : 'default'\r\n    }}\r\n    onClick={onClick}\r\n  >\r\n    <div style={{ fontSize: 18, marginBottom: 8 }}>{title}</div>\r\n    <div style={{ fontSize: 32, fontWeight: 700 }}>\r\n      {title === 'Net Margin (%)'\r\n        ? `${value}%`\r\n        : `â‚¹${Number(value).toLocaleString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst BreakdownModal = ({ type, breakdown, onClose }) => (\r\n  <div style={{\r\n    position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh',\r\n    background: '#0007', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 9999\r\n  }}>\r\n    <div style={{ background: '#fff', borderRadius: 10, padding: 32, minWidth: 400 }}>\r\n      <h3>{type.charAt(0).toUpperCase() + type.slice(1)} Breakdown by Category</h3>\r\n      <table style={{ width: '100%', marginTop: 16 }}>\r\n        <thead>\r\n          <tr>\r\n            <th>Category</th>\r\n            <th>Amount</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.entries(breakdown).map(([cat, amt]) => (\r\n            <tr key={cat}>\r\n              <td>{cat}</td>\r\n              <td>â‚¹{amt.toLocaleString()}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button style={{ marginTop: 24 }} onClick={onClose}>Close</button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst Dashboard = ({ isLoggedIn, onLogout }) => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.userEmail || '';\r\n  const organizationId = location.state?.organizationId || null;\r\n  const navigate = useNavigate();\r\n\r\n  // --- State declarations ---\r\n  const [view, setView] = useState(() => localStorage.getItem('dashboardView') || 'organizations');\r\n  const [selectedOrg, setSelectedOrg] = useState(() => {\r\n    const org = localStorage.getItem('selectedOrg');\r\n    return org ? JSON.parse(org) : null;\r\n  });\r\n  const [selectedDept, setSelectedDept] = useState(() => localStorage.getItem('selectedDept') || 'all');\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n  const [organizations, setOrganizations] = useState([]);\r\n  const [rawProjects, setRawProjects] = useState([]);\r\n  const [departments, setDepartments] = useState([]);\r\n  const [showNewProjectForm, setShowNewProjectForm] = useState(false);\r\n\r\n  // --- Excel/DB Import states ---\r\n  const [excelData, setExcelData] = useState([]);\r\n  const [excelColumns, setExcelColumns] = useState([]);\r\n  const [columnMap, setColumnMap] = useState({});\r\n  const [uploadFileName, setUploadFileName] = useState('');\r\n  const [importedRows, setImportedRows] = useState([]);\r\n  const [projectsFromDB, setProjectsFromDB] = useState([]);\r\n  const [step, setStep] = useState(1);\r\n\r\n  // --- Modal state for breakdown ---\r\n  const [modalView, setModalView] = useState(null); // 'ar', 'ap', 'profit', 'loss', null\r\n\r\n  // --- Load organizations ---\r\n  useEffect(() => {\r\n    const loadOrgs = async () => {\r\n      try {\r\n        const res = await fetch(`${API_BASE}/organizations`);\r\n        const data = await res.json();\r\n        const mapped = data.map(o => ({\r\n          id: o.OrganizationID,\r\n          name: o.Name,\r\n          type: o.Type || '',\r\n          description: o.Description || '',\r\n          icon: o.Name && o.Name.toLowerCase().includes('collabridge') ? Code : Building2,\r\n          color: o.Name && o.Name.toLowerCase().includes('la tierra') ? '#10b981' : '#3b82f6'\r\n        }));\r\n        setOrganizations(mapped);\r\n      } catch (err) {\r\n        console.error('Error loading organizations:', err);\r\n      }\r\n    };\r\n    loadOrgs();\r\n  }, []);\r\n\r\n  // --- Organization selection ---\r\n  const handleOrgSelect = async (orgId) => {\r\n    setSelectedDept('all');\r\n    setSelectedProject(null);\r\n    setView('dashboard');\r\n    setStep(1);\r\n\r\n    try {\r\n      const orgRes = await fetch(`${API_BASE}/organizations/${orgId}`);\r\n      const orgData = await orgRes.json();\r\n\r\n      const projRes = await fetch(`${API_BASE}/projects?organizationId=${orgId}`);\r\n      const projRows = await projRes.json();\r\n\r\n      const deptRes = await fetch(`${API_BASE}/departments?organizationId=${orgId}`);\r\n      const deptRows = await deptRes.json();\r\n\r\n      const mappedProjects = (projRows || []).map(p => ({\r\n        id: p.ProjectID || p.ProjectId || p.id,\r\n        name: p.ProjectName || p.Name || p.name || '',\r\n        status: (p.Status || p.status || '').toString(),\r\n        budget: Number(p.Budget ?? p.budget ?? 0),\r\n        spent: Number(p.Spending ?? p.spent ?? 0),\r\n        profit: Number(\r\n          p.Profit !== undefined\r\n            ? p.Profit\r\n            : (Number(p.Budget ?? p.budget ?? 0) - Number(p.Spending ?? p.spent ?? 0))\r\n        ),\r\n        ar: Number(p.AR ?? p.ar ?? 0),\r\n        ap: Number(p.AP ?? p.ap ?? Number(p.Spending ?? p.spent ?? 0)),\r\n        team: Number(p.Team ?? p.team ?? 0),\r\n        deadline: p.EndDate || p.deadline || '',\r\n        departmentName: p.DepartmentName || p.departmentName || '',\r\n        transactions: p.transactions || [] // If you have transactions per project\r\n      }));\r\n\r\n      setRawProjects(mappedProjects);\r\n      setSelectedOrg({\r\n        id: orgData.OrganizationID || orgId,\r\n        name: orgData.Name && orgData.Name.trim() ? orgData.Name : (organizations.find(o => o.id === orgId)?.name || ''),\r\n        type: orgData.Type && orgData.Type.trim() ? orgData.Type : (organizations.find(o => o.id === orgId)?.type || ''),\r\n        description: orgData.Description && orgData.Description.trim() ? orgData.Description : (organizations.find(o => o.id === orgId)?.description || ''),\r\n        projects: mappedProjects,\r\n        color: organizations.find(o => o.id === orgId)?.color || '#3b82f6',\r\n        icon: organizations.find(o => o.id === orgId)?.icon || Building2\r\n      });\r\n      localStorage.setItem('selectedOrg', JSON.stringify(orgData));\r\n\r\n      setDepartments((deptRows || []).map(d => ({ id: d.DepartmentID, name: d.Name })));\r\n    } catch (err) {\r\n      console.error('Error selecting organization:', err);\r\n    }\r\n  };\r\n\r\n  // --- Excel Upload & Direct Import ---\r\n  const handleFileUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    setUploadFileName(file.name);\r\n\r\n    let rows = [];\r\n    if (file.name.endsWith('.csv')) {\r\n      await new Promise((resolve, reject) => {\r\n        Papa.parse(file, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => {\r\n            rows = results.data;\r\n            resolve();\r\n          },\r\n          error: reject\r\n        });\r\n      });\r\n    } else {\r\n      const data = await new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => resolve(evt.target.result);\r\n        reader.readAsBinaryString(file);\r\n      });\r\n      const workbook = XLSX.read(data, { type: 'binary' });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const sheet = workbook.Sheets[sheetName];\r\n      rows = XLSX.utils.sheet_to_json(sheet, { defval: '' });\r\n    }\r\n\r\n    // Default columnMap: each field maps to itself\r\n    const columnMap = {\r\n      OrganizationID: 'Org Id',\r\n      OrgName: 'Org name',\r\n      TxnID: 'TxnID',\r\n      TxnDate: 'TxnDate',\r\n      Category: 'Category',\r\n      Item: 'Item',\r\n      Type: 'ExpenseType',\r\n      Amount: 'Amount',\r\n      ProjectID: 'ProjectID',\r\n      ProjectName: 'ProjectName'\r\n    };\r\n\r\n    await fetch(`${API_BASE}/import-transactions`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        rows,\r\n        uploaderEmail: userEmail,\r\n        fileName: file.name,\r\n        organizationId: selectedOrg?.id || null,\r\n        columnMap\r\n      })\r\n    });\r\n\r\n    // Fetch imported transactions and project financials from DB\r\n    const importedRes = await fetch(`${API_BASE}/imported-transactions`);\r\n    const imported = await importedRes.json();\r\n    setImportedRows(imported);\r\n    localStorage.setItem('importedRows', JSON.stringify(imported));\r\n\r\n    const projFinRes = await fetch(`${API_BASE}/project-financials`);\r\n    const projFin = await projFinRes.json();\r\n    setProjectsFromDB(Array.isArray(projFin) ? projFin : []);\r\n  };\r\n\r\n  // --- Use calculation logic for dashboard metrics ---\r\n  const dashboardMetrics = calculateDashboardMetrics(importedRows);\r\n\r\n  // --- Project selection handler ---\r\n  const handleProjectSelect = (project) => {\r\n    setSelectedProject(project);\r\n    setView('project');\r\n  };\r\n\r\n  // --- Build projects with transactions from importedRows ---\r\n  useEffect(() => {\r\n    // Group transactions by ProjectID\r\n    const txByProject = {};\r\n    importedRows.forEach(tx => {\r\n      const pid = tx.ProjectID || tx.ProjectId || tx.projectId || '';\r\n      if (!txByProject[pid]) txByProject[pid] = [];\r\n      txByProject[pid].push(tx);\r\n    });\r\n\r\n    // Map projectsFromDB with transactions, budget, spent, etc.\r\n    const normalizedProjects = (projectsFromDB || []).map(p => ({\r\n      id: p.ProjectID || p.ProjectId || p.id,\r\n      name: p.ProjectName || p.Name || p.name || '',\r\n      status: (p.Status || p.status || '').toString(),\r\n      budget: Number(p.Budget ?? p.budget ?? 0),\r\n      spent: Number(p.Spending ?? p.spent ?? 0),\r\n      profit: Number(\r\n        p.Profit !== undefined\r\n          ? p.Profit\r\n          : (Number(p.Budget ?? p.budget ?? 0) - Number(p.Spending ?? p.spent ?? 0))\r\n      ),\r\n      ar: Number(p.AR ?? p.ar ?? 0),\r\n      ap: Number(p.AP ?? p.ap ?? Number(p.Spending ?? p.spent ?? 0)),\r\n      team: Number(p.Team ?? p.team ?? 0),\r\n      deadline: p.EndDate || p.deadline || '',\r\n      departmentName: p.DepartmentName || p.departmentName || '',\r\n      transactions: txByProject[p.ProjectID || p.ProjectId || p.id] || []\r\n    }));\r\n    setRawProjects(normalizedProjects);\r\n  }, [importedRows, projectsFromDB]);\r\n\r\n  // --- Restore state from localStorage ---\r\n  useEffect(() => {\r\n    // Restore importedRows from localStorage if present\r\n    const savedRows = localStorage.getItem('importedRows');\r\n    if (savedRows) {\r\n      setImportedRows(JSON.parse(savedRows));\r\n    }\r\n    // Restore selectedOrg from localStorage if present\r\n    const savedOrg = localStorage.getItem('selectedOrg');\r\n    if (savedOrg) {\r\n      setSelectedOrg(JSON.parse(savedOrg));\r\n    }\r\n  }, []);\r\n\r\n  // --- UI ---\r\n  return (\r\n    <>\r\n      <Header isLoggedIn={isLoggedIn} onLogout={onLogout} />\r\n      {view === 'organizations' && (\r\n        <OrganizationSelector\r\n          organizations={organizations}\r\n          onSelect={handleOrgSelect}\r\n        />\r\n      )}\r\n\r\n      {view === 'project' && selectedProject && (\r\n        <ProjectDashboard\r\n          project={selectedProject}\r\n          organization={selectedOrg}\r\n          onBack={() => setView('dashboard')}\r\n        />\r\n      )}\r\n\r\n      {view === 'dashboard' && (\r\n        <div style={{ \r\n          width: '100vw', \r\n          minHeight: '100vh', \r\n          padding: '20px', \r\n          background: '#f5f5f5',\r\n          boxSizing: 'border-box' \r\n        }}>\r\n          <div style={{ \r\n            width: '100%', \r\n            maxWidth: 'none', \r\n            margin: '0', \r\n            padding: '24px', \r\n            background: '#fff', \r\n            borderRadius: '10px', \r\n            boxShadow: '0 4px 24px rgba(0,0,0,0.1)' \r\n          }}>\r\n            <h2>Accounts Dashboard</h2>\r\n            <div style={{ marginTop: 40 }}>\r\n              <p>Upload Excel/CSV to import transactions:</p>\r\n              <input type=\"file\" accept=\".xlsx,.xls,.csv\" onChange={handleFileUpload} />\r\n            </div>\r\n            {/* --- Cards Row REMOVED --- */}\r\n            {/* --- Breakdown Modal --- */}\r\n            {modalView && (\r\n              <BreakdownModal\r\n                type={modalView}\r\n                breakdown={getBreakdownByCategory(importedRows, modalView)}\r\n                onClose={() => setModalView(null)}\r\n              />\r\n            )}\r\n            {/* --- Existing CompanyDashboard --- */}\r\n            <CompanyDashboard\r\n              organization={selectedOrg}\r\n              selectedDept={selectedDept}\r\n              onDeptChange={setSelectedDept}\r\n              onProjectSelect={handleProjectSelect}\r\n              onAddProject={setShowNewProjectForm}\r\n              onFileUpload={handleFileUpload}\r\n              onBack={() => setView('organizations')}\r\n              projects={rawProjects} // <-- FIXED: use normalized projects with transactions\r\n              totals={dashboardMetrics}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}