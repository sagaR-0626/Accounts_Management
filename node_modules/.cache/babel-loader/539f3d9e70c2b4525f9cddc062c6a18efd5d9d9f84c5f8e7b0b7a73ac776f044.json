{"ast":null,"code":"/// caluclation.js page\n\nexport function calculateTransactionTotals(transactions) {\n  return transactions.reduce((acc, txn) => {\n    const amount = Number(txn.Amount || 0);\n    const type = (txn.Type || txn.Type || '').toLowerCase();\n    if (type === 'expense') {\n      acc.ap += amount;\n    } else if (type === 'receipt' || type === 'income') {\n      acc.ar += amount;\n    }\n    return acc;\n  }, {\n    ar: 0,\n    ap: 0\n  });\n}\nexport function calculateDashboardTotals(projects) {\n  return projects.reduce((acc, project) => ({\n    budget: acc.budget + (project.budget || 0),\n    spent: acc.spent + (project.spent || 0),\n    profit: acc.profit + (project.profit || 0),\n    ar: acc.ar + (project.ar || 0),\n    ap: acc.ap + (project.ap || 0),\n    team: acc.team + (project.team || 0)\n  }), {\n    budget: 0,\n    spent: 0,\n    profit: 0,\n    ar: 0,\n    ap: 0,\n    team: 0\n  });\n}\nexport function calculateDashboardMetrics(rows) {\n  let ar = 0,\n    ap = 0,\n    profit = 0,\n    loss = 0;\n  rows.forEach(row => {\n    const type = (row.Type || '').toLowerCase();\n    const amount = Number(row.Amount || 0);\n    if (type === 'expense') {\n      ap += amount;\n      loss += amount;\n    } else if (type === 'income' || type === 'receipt') {\n      ar += amount;\n      profit += amount;\n    }\n  });\n  const netMargin = profit - loss;\n  const netMarginPercent = profit > 0 ? netMargin / profit * 100 : 0;\n  return {\n    ar,\n    ap,\n    profit,\n    loss,\n    netMargin,\n    netMarginPercent: netMarginPercent.toFixed(2)\n  };\n}\n\n// Breakdown by category for drilldown modals\nexport function getBreakdownByCategory(rows, typeKey) {\n  const filtered = rows.filter(row => {\n    const t = (row.Type || '').toLowerCase();\n    if (typeKey === 'ar') return t === 'income' || t === 'receipt';\n    if (typeKey === 'ap') return t === 'expense';\n    if (typeKey === 'profit') return t === 'income' || t === 'receipt';\n    if (typeKey === 'loss') return t === 'expense';\n    return false;\n  });\n  const grouped = {};\n  filtered.forEach(row => {\n    const cat = row.Category || 'Other';\n    grouped[cat] = (grouped[cat] || 0) + Number(row.Amount || 0);\n  });\n  return grouped;\n}\n\n// Get compact project list with AR/AP/Profit/Loss\nexport function getProjectFinancials(projects) {\n  return projects.map(p => {\n    const ar = Number(p.AR || 0);\n    const ap = Number(p.AP || 0);\n    const profit = ar - ap;\n    return {\n      ProjectID: p.ProjectID,\n      ProjectName: p.ProjectName,\n      AR: ar,\n      AP: ap,\n      Profit: profit,\n      Loss: profit < 0 ? Math.abs(profit) : 0\n    };\n  });\n}\n\n// Get top N profitable projects\nexport function getTopProfitableProjects(projects, n = 5) {\n  const financials = getProjectFinancials(projects);\n  return financials.sort((a, b) => b.Profit - a.Profit).slice(0, n);\n}\n\n// Get top N loss-making projects\nexport function getTopLossProjects(projects, n = 5) {\n  const financials = getProjectFinancials(projects);\n  return financials.filter(p => p.Profit < 0).sort((a, b) => a.Profit - b.Profit).slice(0, n);\n}\n\n// Get revenue contribution per project (for pie chart)\nexport function getProjectRevenueShare(projects) {\n  const totalRevenue = projects.reduce((sum, p) => sum + Number(p.AR || 0), 0);\n  return projects.map(p => ({\n    ProjectName: p.ProjectName,\n    Share: totalRevenue ? (Number(p.AR || 0) / totalRevenue * 100).toFixed(2) : 0\n  }));\n}\n\n// Get compact project list with AR/AP/Profit/Loss from transactions\nexport function getProjectFinancialsFromTransactions(transactions) {\n  const projects = {};\n  transactions.forEach(txn => {\n    const pid = txn.ProjectID;\n    if (!pid) return;\n    if (!projects[pid]) {\n      projects[pid] = {\n        ProjectID: pid,\n        ProjectName: txn.ProjectName || '',\n        AR: 0,\n        AP: 0\n      };\n    }\n    const type = (txn.Type || '').toLowerCase();\n    const amount = Number(txn.Amount || 0);\n    if (type === 'expense') {\n      projects[pid].AP += amount;\n    } else if (type === 'income' || type === 'receipt') {\n      projects[pid].AR += amount;\n    }\n  });\n\n  // Calculate profit/loss for each project\n  return Object.values(projects).map(p => ({\n    ...p,\n    Profit: p.AR - p.AP,\n    Loss: p.AR - p.AP < 0 ? Math.abs(p.AR - p.AP) : 0\n  }));\n}\n\n// Get top N profitable projects\nexport function getTopProfitableProjectsFromTransactions(transactions, n = 5) {\n  const financials = getProjectFinancialsFromTransactions(transactions);\n  return financials.sort((a, b) => b.Profit - a.Profit).slice(0, n);\n}\n\n// Get revenue contribution per project (for pie chart)\nexport function getProjectRevenueShareFromTransactions(transactions) {\n  const financials = getProjectFinancialsFromTransactions(transactions);\n  const totalRevenue = financials.reduce((sum, p) => sum + p.AR, 0);\n  return financials.map(p => ({\n    ProjectName: p.ProjectName,\n    Share: totalRevenue ? (p.AR / totalRevenue * 100).toFixed(2) : 0\n  }));\n}","map":{"version":3,"names":["calculateTransactionTotals","transactions","reduce","acc","txn","amount","Number","Amount","type","Type","toLowerCase","ap","ar","calculateDashboardTotals","projects","project","budget","spent","profit","team","calculateDashboardMetrics","rows","loss","forEach","row","netMargin","netMarginPercent","toFixed","getBreakdownByCategory","typeKey","filtered","filter","t","grouped","cat","Category","getProjectFinancials","map","p","AR","AP","ProjectID","ProjectName","Profit","Loss","Math","abs","getTopProfitableProjects","n","financials","sort","a","b","slice","getTopLossProjects","getProjectRevenueShare","totalRevenue","sum","Share","getProjectFinancialsFromTransactions","pid","Object","values","getTopProfitableProjectsFromTransactions","getProjectRevenueShareFromTransactions"],"sources":["C:/Users/VivekReddyMeka/Desktop/Accounts_Management/src/utils/Calculations.js"],"sourcesContent":["/// caluclation.js page\r\n \r\nexport function calculateTransactionTotals(transactions) {\r\n  return transactions.reduce((acc, txn) => {\r\n    const amount = Number(txn.Amount || 0);\r\n    const type = (txn.Type || txn.Type || '').toLowerCase();\r\n    if (type === 'expense') {\r\n      acc.ap += amount;\r\n    } else if (type === 'receipt' || type === 'income') {\r\n      acc.ar += amount;\r\n    }\r\n    return acc;\r\n  }, { ar: 0, ap: 0 });\r\n}\r\n \r\nexport function calculateDashboardTotals(projects) {\r\n  return projects.reduce((acc, project) => ({\r\n    budget: acc.budget + (project.budget || 0),\r\n    spent: acc.spent + (project.spent || 0),\r\n    profit: acc.profit + (project.profit || 0),\r\n    ar: acc.ar + (project.ar || 0),\r\n    ap: acc.ap + (project.ap || 0),\r\n    team: acc.team + (project.team || 0)\r\n  }), { budget: 0, spent: 0, profit: 0, ar: 0, ap: 0, team: 0 });\r\n}\r\n \r\nexport function calculateDashboardMetrics(rows) {\r\n  let ar = 0, ap = 0, profit = 0, loss = 0;\r\n  rows.forEach(row => {\r\n    const type = (row.Type || '').toLowerCase();\r\n    const amount = Number(row.Amount || 0);\r\n    if (type === 'expense') {\r\n      ap += amount;\r\n      loss += amount;\r\n    } else if (type === 'income' || type === 'receipt') {\r\n      ar += amount;\r\n      profit += amount;\r\n    }\r\n  });\r\n  const netMargin = profit - loss;\r\n  const netMarginPercent = profit > 0 ? ((netMargin / profit) * 100) : 0;\r\n  return { ar, ap, profit, loss, netMargin, netMarginPercent: netMarginPercent.toFixed(2) };\r\n}\r\n \r\n// Breakdown by category for drilldown modals\r\nexport function getBreakdownByCategory(rows, typeKey) {\r\n  const filtered = rows.filter(row => {\r\n    const t = (row.Type || '').toLowerCase();\r\n    if (typeKey === 'ar') return t === 'income' || t === 'receipt';\r\n    if (typeKey === 'ap') return t === 'expense';\r\n    if (typeKey === 'profit') return t === 'income' || t === 'receipt';\r\n    if (typeKey === 'loss') return t === 'expense';\r\n    return false;\r\n  });\r\n  const grouped = {};\r\n  filtered.forEach(row => {\r\n    const cat = row.Category || 'Other';\r\n    grouped[cat] = (grouped[cat] || 0) + Number(row.Amount || 0);\r\n  });\r\n  return grouped;\r\n}\r\n \r\n// Get compact project list with AR/AP/Profit/Loss\r\nexport function getProjectFinancials(projects) {\r\n  return projects.map(p => {\r\n    const ar = Number(p.AR || 0);\r\n    const ap = Number(p.AP || 0);\r\n    const profit = ar - ap;\r\n    return {\r\n      ProjectID: p.ProjectID,\r\n      ProjectName: p.ProjectName,\r\n      AR: ar,\r\n      AP: ap,\r\n      Profit: profit,\r\n      Loss: profit < 0 ? Math.abs(profit) : 0\r\n    };\r\n  });\r\n}\r\n \r\n// Get top N profitable projects\r\nexport function getTopProfitableProjects(projects, n = 5) {\r\n  const financials = getProjectFinancials(projects);\r\n  return financials\r\n    .sort((a, b) => b.Profit - a.Profit)\r\n    .slice(0, n);\r\n}\r\n \r\n// Get top N loss-making projects\r\nexport function getTopLossProjects(projects, n = 5) {\r\n  const financials = getProjectFinancials(projects);\r\n  return financials\r\n    .filter(p => p.Profit < 0)\r\n    .sort((a, b) => a.Profit - b.Profit)\r\n    .slice(0, n);\r\n}\r\n \r\n// Get revenue contribution per project (for pie chart)\r\nexport function getProjectRevenueShare(projects) {\r\n  const totalRevenue = projects.reduce((sum, p) => sum + Number(p.AR || 0), 0);\r\n  return projects.map(p => ({\r\n    ProjectName: p.ProjectName,\r\n    Share: totalRevenue ? ((Number(p.AR || 0) / totalRevenue) * 100).toFixed(2) : 0\r\n  }));\r\n}\r\n \r\n// Get compact project list with AR/AP/Profit/Loss from transactions\r\nexport function getProjectFinancialsFromTransactions(transactions) {\r\n  const projects = {};\r\n  transactions.forEach(txn => {\r\n    const pid = txn.ProjectID;\r\n    if (!pid) return;\r\n    if (!projects[pid]) {\r\n      projects[pid] = {\r\n        ProjectID: pid,\r\n        ProjectName: txn.ProjectName || '',\r\n        AR: 0,\r\n        AP: 0\r\n      };\r\n    }\r\n    const type = (txn.Type || '').toLowerCase();\r\n    const amount = Number(txn.Amount || 0);\r\n    if (type === 'expense') {\r\n      projects[pid].AP += amount;\r\n    } else if (type === 'income' || type === 'receipt') {\r\n      projects[pid].AR += amount;\r\n    }\r\n  });\r\n \r\n  // Calculate profit/loss for each project\r\n  return Object.values(projects).map(p => ({\r\n    ...p,\r\n    Profit: p.AR - p.AP,\r\n    Loss: p.AR - p.AP < 0 ? Math.abs(p.AR - p.AP) : 0\r\n  }));\r\n}\r\n \r\n// Get top N profitable projects\r\nexport function getTopProfitableProjectsFromTransactions(transactions, n = 5) {\r\n  const financials = getProjectFinancialsFromTransactions(transactions);\r\n  return financials.sort((a, b) => b.Profit - a.Profit).slice(0, n);\r\n}\r\n \r\n// Get revenue contribution per project (for pie chart)\r\nexport function getProjectRevenueShareFromTransactions(transactions) {\r\n  const financials = getProjectFinancialsFromTransactions(transactions);\r\n  const totalRevenue = financials.reduce((sum, p) => sum + p.AR, 0);\r\n  return financials.map(p => ({\r\n    ProjectName: p.ProjectName,\r\n    Share: totalRevenue ? ((p.AR / totalRevenue) * 100).toFixed(2) : 0\r\n  }));\r\n}\r\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}