{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VivekReddyMeka\\\\Desktop\\\\Accounts_Management\\\\src\\\\Components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Building2, Code } from 'lucide-react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport OrganizationSelector from './OrganizationSelector';\nimport CompanyDashboard from './CompanyDashboard';\nimport ProjectDashboard from './ProjectDashboard';\nimport Header from './Header';\nimport '../Styles/Dashboard.css';\nimport * as XLSX from 'xlsx';\nimport Papa from 'papaparse';\nimport NewProjectModal from './NewProjectModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = 'http://localhost:3001';\nconst dbFields = ['OrganizationID', 'OrgName', 'TxnID', 'TxnDate', 'Category', 'Item', 'Type', 'Amount', 'ProjectID', 'ProjectName'];\nconst OrganizationDashboard = ({\n  isLoggedIn,\n  onLogout\n}) => {\n  _s();\n  var _location$state, _location$state2;\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.userEmail) || '';\n  const organizationId = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.organizationId) || null;\n\n  // --- State declarations ---\n  const [view, setView] = useState(() => localStorage.getItem('dashboardView') || 'organizations');\n  const [selectedOrg, setSelectedOrg] = useState(() => {\n    const org = localStorage.getItem('selectedOrg');\n    return org ? JSON.parse(org) : null;\n  });\n  const [selectedDept, setSelectedDept] = useState(() => localStorage.getItem('selectedDept') || 'all');\n  const [selectedProject, setSelectedProject] = useState(() => {\n    const proj = localStorage.getItem('selectedProject');\n    return proj ? JSON.parse(proj) : null;\n  });\n  const [organizations, setOrganizations] = useState([]);\n  const [rawProjects, setRawProjects] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [totals, setTotals] = useState({\n    budget: 0,\n    spent: 0,\n    profit: 0,\n    ar: 0,\n    ap: 0,\n    team: 0\n  });\n  const [showNewProjectForm, setShowNewProjectForm] = useState(false);\n\n  // --- Excel/DB Import states ---\n  const [excelData, setExcelData] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [columnMap, setColumnMap] = useState({});\n  const [uploadFileName, setUploadFileName] = useState('');\n  const [importedRows, setImportedRows] = useState([]);\n  const [projectsFromDB, setProjectsFromDB] = useState([]);\n  const [step, setStep] = useState(1); // 1: upload, 2: map, 3: dashboard\n\n  // --- Load organizations ---\n  useEffect(() => {\n    const loadOrgs = async () => {\n      try {\n        const res = await fetch(`${API_BASE}/organizations`);\n        const data = await res.json();\n        const mapped = data.map(o => ({\n          id: o.OrganizationID,\n          name: o.Name,\n          type: o.Type || '',\n          description: o.Description || '',\n          icon: o.Name && o.Name.toLowerCase().includes('collabridge') ? Code : Building2,\n          color: o.Name && o.Name.toLowerCase().includes('la tierra') ? '#10b981' : '#3b82f6'\n        }));\n        setOrganizations(mapped);\n      } catch (err) {\n        console.error('Error loading organizations:', err);\n      }\n    };\n    loadOrgs();\n  }, []);\n\n  // --- Organization selection ---\n  const handleOrgSelect = async orgId => {\n    setSelectedDept('all');\n    setSelectedProject(null);\n    setView('dashboard');\n    setStep(1); // Reset import step\n\n    try {\n      var _organizations$find, _organizations$find2, _organizations$find3, _organizations$find4, _organizations$find5;\n      const orgRes = await fetch(`${API_BASE}/organizations/${orgId}`);\n      const orgData = await orgRes.json();\n      const projRes = await fetch(`${API_BASE}/projects?organizationId=${orgId}`);\n      const projRows = await projRes.json();\n      const deptRes = await fetch(`${API_BASE}/departments?organizationId=${orgId}`);\n      const deptRows = await deptRes.json();\n      const mappedProjects = (projRows || []).map(p => ({\n        id: p.ProjectID || p.ProjectId || p.id,\n        name: p.ProjectName || p.Name || '',\n        status: (p.Status || '').toString(),\n        budget: Number(p.Budget || 0),\n        spent: Number(p.Spending || 0),\n        profit: Number(p.Profit !== undefined ? p.Profit : Number(p.Budget || 0) - Number(p.Spending || 0)),\n        ar: Number(p.AR || 0),\n        ap: Number(p.AP !== undefined ? p.AP : Number(p.Spending || 0)),\n        team: Number(p.Team || 0),\n        deadline: p.EndDate || p.deadline || '',\n        departmentName: p.DepartmentName || ''\n      }));\n      setRawProjects(mappedProjects);\n      setSelectedOrg({\n        id: orgData.OrganizationID || orgId,\n        name: orgData.Name && orgData.Name.trim() ? orgData.Name : ((_organizations$find = organizations.find(o => o.id === orgId)) === null || _organizations$find === void 0 ? void 0 : _organizations$find.name) || '',\n        type: orgData.Type && orgData.Type.trim() ? orgData.Type : ((_organizations$find2 = organizations.find(o => o.id === orgId)) === null || _organizations$find2 === void 0 ? void 0 : _organizations$find2.type) || '',\n        description: orgData.Description && orgData.Description.trim() ? orgData.Description : ((_organizations$find3 = organizations.find(o => o.id === orgId)) === null || _organizations$find3 === void 0 ? void 0 : _organizations$find3.description) || '',\n        projects: mappedProjects,\n        color: ((_organizations$find4 = organizations.find(o => o.id === orgId)) === null || _organizations$find4 === void 0 ? void 0 : _organizations$find4.color) || '#3b82f6',\n        icon: ((_organizations$find5 = organizations.find(o => o.id === orgId)) === null || _organizations$find5 === void 0 ? void 0 : _organizations$find5.icon) || Building2\n      });\n      setDepartments((deptRows || []).map(d => ({\n        id: d.DepartmentID,\n        name: d.Name\n      })));\n    } catch (err) {\n      console.error('Error selecting organization:', err);\n    }\n  };\n\n  // --- Excel Upload & Import ---\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    setUploadFileName(file.name);\n    if (file.name.endsWith('.csv')) {\n      Papa.parse(file, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => {\n          setExcelData(results.data);\n          setExcelColumns(Object.keys(results.data[0] || {}));\n          setStep(2);\n        },\n        error: () => setStep(1)\n      });\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = evt => {\n      const data = evt.target.result;\n      const workbook = XLSX.read(data, {\n        type: 'binary'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const json = XLSX.utils.sheet_to_json(sheet, {\n        defval: ''\n      });\n      setExcelData(json);\n      setExcelColumns(Object.keys(json[0] || {}));\n      setStep(2);\n    };\n    reader.readAsBinaryString(file);\n  };\n\n  // --- Save column mapping and import to DB ---\n  const handleMappingSave = async mapping => {\n    setColumnMap(mapping);\n    const mappedRows = excelData.map(row => {\n      const mappedRow = {};\n      Object.entries(mapping).forEach(([dbField, excelCol]) => {\n        mappedRow[dbField] = row[excelCol] || '';\n      });\n      return mappedRow;\n    });\n    await fetch(`${API_BASE}/import-transactions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        rows: mappedRows,\n        uploaderEmail: userEmail,\n        fileName: uploadFileName,\n        organizationId: (selectedOrg === null || selectedOrg === void 0 ? void 0 : selectedOrg.id) || null,\n        columnMap: mapping\n      })\n    });\n\n    // Reload imported transactions and project financials from DB\n    const importedRes = await fetch(`${API_BASE}/imported-transactions`);\n    const imported = await importedRes.json();\n    setImportedRows(imported);\n    const projFinRes = await fetch(`${API_BASE}/project-financials`);\n    const projFin = await projFinRes.json();\n    setProjectsFromDB(Array.isArray(projFin) ? projFin : []);\n    setStep(3);\n  };\n\n  // --- UI ---\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      isLoggedIn: isLoggedIn,\n      onLogout: onLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), view === 'organizations' && /*#__PURE__*/_jsxDEV(OrganizationSelector, {\n      organizations: organizations,\n      onSelect: handleOrgSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), view === 'project' && selectedProject && /*#__PURE__*/_jsxDEV(ProjectDashboard, {\n      project: selectedProject,\n      organization: selectedOrg,\n      onBack: () => setView('dashboard')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this), view === 'dashboard' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: 900,\n        margin: '40px auto',\n        padding: 24,\n        background: '#fff',\n        borderRadius: 10,\n        boxShadow: '0 4px 24px #0001'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Accounts Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), step === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 40\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Upload Excel/CSV to import transactions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".xlsx,.xls,.csv\",\n          onChange: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }, this), step === 2 && /*#__PURE__*/_jsxDEV(MappingModal, {\n        columns: excelColumns,\n        onMap: handleMappingSave,\n        onCancel: () => setStep(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this), step === 3 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Imported Transactions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxHeight: 300,\n            overflow: 'auto',\n            marginBottom: 24\n          },\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            style: {\n              width: '100%',\n              fontSize: 13\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: dbFields.map(f => /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: f\n                }, f, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 42\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: importedRows.slice(0, 20).map((row, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: dbFields.map(f => /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: row[f]\n                }, f, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 44\n                }, this))\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Project Financials\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          style: {\n            width: '100%',\n            background: '#fff',\n            borderRadius: 8,\n            boxShadow: '0 2px 8px #0001',\n            fontSize: 14\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"AR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"AP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Profit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Loss\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: projectsFromDB.map(p => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: p.ProjectName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"\\u20B9\", p.AR.toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"\\u20B9\", p.AP.toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  color: p.Profit >= 0 ? 'green' : 'red'\n                },\n                children: [\"\\u20B9\", p.Profit.toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  color: p.Loss > 0 ? 'red' : 'inherit'\n                },\n                children: [\"\\u20B9\", p.Loss.toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 23\n              }, this)]\n            }, p.ProjectID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(CompanyDashboard, {\n        organization: selectedOrg,\n        selectedDept: selectedDept,\n        onDeptChange: setSelectedDept,\n        onProjectSelect: setSelectedProject,\n        onAddProject: setShowNewProjectForm,\n        onFileUpload: handleFileUpload,\n        onBack: () => setView('organizations'),\n        projects: rawProjects,\n        totals: totals\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this), showNewProjectForm && selectedOrg && /*#__PURE__*/_jsxDEV(NewProjectModal, {\n        organizationId: selectedOrg.id,\n        departments: departments,\n        onCreated: () => handleOrgSelect(selectedOrg.id),\n        onCancel: () => setShowNewProjectForm(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n// --- Mapping Modal Component ---\n_s(OrganizationDashboard, \"X6GxOUdjZbn5RjW4fpmPMwiuxII=\", false, function () {\n  return [useLocation];\n});\n_c = OrganizationDashboard;\nconst MappingModal = ({\n  columns,\n  onMap,\n  onCancel\n}) => {\n  _s2();\n  const [map, setMap] = useState({});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 40\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Map Excel Columns to DB Fields\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), dbFields.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [field, \": \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: map[field] || '',\n        onChange: e => setMap(m => ({\n          ...m,\n          [field]: e.target.value\n        })),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), columns.map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: col,\n          children: col\n        }, col, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 33\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this)]\n    }, field, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onMap(map),\n      style: {\n        marginRight: 12\n      },\n      children: \"Save Mapping & Import\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onCancel,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n};\n_s2(MappingModal, \"nhcbiMc8Nx2yZ7KcVD9ukP5Wouk=\");\n_c2 = MappingModal;\nexport default OrganizationDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"OrganizationDashboard\");\n$RefreshReg$(_c2, \"MappingModal\");","map":{"version":3,"names":["React","useState","useEffect","Building2","Code","useNavigate","useLocation","OrganizationSelector","CompanyDashboard","ProjectDashboard","Header","XLSX","Papa","NewProjectModal","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","dbFields","OrganizationDashboard","isLoggedIn","onLogout","_s","_location$state","_location$state2","location","userEmail","state","organizationId","view","setView","localStorage","getItem","selectedOrg","setSelectedOrg","org","JSON","parse","selectedDept","setSelectedDept","selectedProject","setSelectedProject","proj","organizations","setOrganizations","rawProjects","setRawProjects","departments","setDepartments","totals","setTotals","budget","spent","profit","ar","ap","team","showNewProjectForm","setShowNewProjectForm","excelData","setExcelData","excelColumns","setExcelColumns","columnMap","setColumnMap","uploadFileName","setUploadFileName","importedRows","setImportedRows","projectsFromDB","setProjectsFromDB","step","setStep","loadOrgs","res","fetch","data","json","mapped","map","o","id","OrganizationID","name","Name","type","Type","description","Description","icon","toLowerCase","includes","color","err","console","error","handleOrgSelect","orgId","_organizations$find","_organizations$find2","_organizations$find3","_organizations$find4","_organizations$find5","orgRes","orgData","projRes","projRows","deptRes","deptRows","mappedProjects","p","ProjectID","ProjectId","ProjectName","status","Status","toString","Number","Budget","Spending","Profit","undefined","AR","AP","Team","deadline","EndDate","departmentName","DepartmentName","trim","find","projects","d","DepartmentID","handleFileUpload","e","file","target","files","endsWith","header","skipEmptyLines","complete","results","Object","keys","reader","FileReader","onload","evt","result","workbook","read","sheetName","SheetNames","sheet","Sheets","utils","sheet_to_json","defval","readAsBinaryString","handleMappingSave","mapping","mappedRows","row","mappedRow","entries","forEach","dbField","excelCol","method","headers","body","stringify","rows","uploaderEmail","fileName","importedRes","imported","projFinRes","projFin","Array","isArray","children","_jsxFileName","lineNumber","columnNumber","onSelect","project","organization","onBack","style","maxWidth","margin","padding","background","borderRadius","boxShadow","marginTop","accept","onChange","MappingModal","columns","onMap","onCancel","maxHeight","overflow","marginBottom","width","fontSize","f","slice","idx","toLocaleString","Loss","onDeptChange","onProjectSelect","onAddProject","onFileUpload","onCreated","_c","_s2","setMap","field","value","m","col","onClick","marginRight","_c2","$RefreshReg$"],"sources":["C:/Users/VivekReddyMeka/Desktop/Accounts_Management/src/Components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Building2, Code } from 'lucide-react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport OrganizationSelector from './OrganizationSelector';\r\nimport CompanyDashboard from './CompanyDashboard';\r\nimport ProjectDashboard from './ProjectDashboard';\r\nimport Header from './Header';\r\nimport '../Styles/Dashboard.css';\r\nimport * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport NewProjectModal from './NewProjectModal';\r\n\r\nconst API_BASE = 'http://localhost:3001';\r\nconst dbFields = [\r\n  'OrganizationID', 'OrgName', 'TxnID', 'TxnDate', 'Category', 'Item', 'Type', 'Amount', 'ProjectID', 'ProjectName'\r\n];\r\n\r\nconst OrganizationDashboard = ({ isLoggedIn, onLogout }) => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.userEmail || '';\r\n  const organizationId = location.state?.organizationId || null;\r\n\r\n  // --- State declarations ---\r\n  const [view, setView] = useState(() => localStorage.getItem('dashboardView') || 'organizations');\r\n  const [selectedOrg, setSelectedOrg] = useState(() => {\r\n    const org = localStorage.getItem('selectedOrg');\r\n    return org ? JSON.parse(org) : null;\r\n  });\r\n  const [selectedDept, setSelectedDept] = useState(() => localStorage.getItem('selectedDept') || 'all');\r\n  const [selectedProject, setSelectedProject] = useState(() => {\r\n    const proj = localStorage.getItem('selectedProject');\r\n    return proj ? JSON.parse(proj) : null;\r\n  });\r\n  const [organizations, setOrganizations] = useState([]);\r\n  const [rawProjects, setRawProjects] = useState([]);\r\n  const [departments, setDepartments] = useState([]);\r\n  const [totals, setTotals] = useState({ budget:0, spent:0, profit:0, ar:0, ap:0, team:0 });\r\n  const [showNewProjectForm, setShowNewProjectForm] = useState(false);\r\n\r\n  // --- Excel/DB Import states ---\r\n  const [excelData, setExcelData] = useState([]);\r\n  const [excelColumns, setExcelColumns] = useState([]);\r\n  const [columnMap, setColumnMap] = useState({});\r\n  const [uploadFileName, setUploadFileName] = useState('');\r\n  const [importedRows, setImportedRows] = useState([]);\r\n  const [projectsFromDB, setProjectsFromDB] = useState([]);\r\n  const [step, setStep] = useState(1); // 1: upload, 2: map, 3: dashboard\r\n\r\n  // --- Load organizations ---\r\n  useEffect(() => {\r\n    const loadOrgs = async () => {\r\n      try {\r\n        const res = await fetch(`${API_BASE}/organizations`);\r\n        const data = await res.json();\r\n        const mapped = data.map(o => ({\r\n          id: o.OrganizationID,\r\n          name: o.Name,\r\n          type: o.Type || '',\r\n          description: o.Description || '',\r\n          icon: o.Name && o.Name.toLowerCase().includes('collabridge') ? Code : Building2,\r\n          color: o.Name && o.Name.toLowerCase().includes('la tierra') ? '#10b981' : '#3b82f6'\r\n        }));\r\n        setOrganizations(mapped);\r\n      } catch (err) {\r\n        console.error('Error loading organizations:', err);\r\n      }\r\n    };\r\n    loadOrgs();\r\n  }, []);\r\n\r\n  // --- Organization selection ---\r\n  const handleOrgSelect = async (orgId) => {\r\n    setSelectedDept('all');\r\n    setSelectedProject(null);\r\n    setView('dashboard');\r\n    setStep(1); // Reset import step\r\n\r\n    try {\r\n      const orgRes = await fetch(`${API_BASE}/organizations/${orgId}`);\r\n      const orgData = await orgRes.json();\r\n\r\n      const projRes = await fetch(`${API_BASE}/projects?organizationId=${orgId}`);\r\n      const projRows = await projRes.json();\r\n\r\n      const deptRes = await fetch(`${API_BASE}/departments?organizationId=${orgId}`);\r\n      const deptRows = await deptRes.json();\r\n\r\n      const mappedProjects = (projRows || []).map(p => ({\r\n        id: p.ProjectID || p.ProjectId || p.id,\r\n        name: p.ProjectName || p.Name || '',\r\n        status: (p.Status || '').toString(),\r\n        budget: Number(p.Budget || 0),\r\n        spent: Number(p.Spending || 0),\r\n        profit: Number(p.Profit !== undefined ? p.Profit : (Number(p.Budget || 0) - Number(p.Spending || 0))),\r\n        ar: Number(p.AR || 0),\r\n        ap: Number(p.AP !== undefined ? p.AP : Number(p.Spending || 0)),\r\n        team: Number(p.Team || 0),\r\n        deadline: p.EndDate || p.deadline || '',\r\n        departmentName: p.DepartmentName || ''\r\n      }));\r\n\r\n      setRawProjects(mappedProjects);\r\n      setSelectedOrg({\r\n        id: orgData.OrganizationID || orgId,\r\n        name: orgData.Name && orgData.Name.trim() ? orgData.Name : (organizations.find(o => o.id === orgId)?.name || ''),\r\n        type: orgData.Type && orgData.Type.trim() ? orgData.Type : (organizations.find(o => o.id === orgId)?.type || ''),\r\n        description: orgData.Description && orgData.Description.trim() ? orgData.Description : (organizations.find(o => o.id === orgId)?.description || ''),\r\n        projects: mappedProjects,\r\n        color: organizations.find(o => o.id === orgId)?.color || '#3b82f6',\r\n        icon: organizations.find(o => o.id === orgId)?.icon || Building2\r\n      });\r\n\r\n      setDepartments((deptRows || []).map(d => ({ id: d.DepartmentID, name: d.Name })));\r\n    } catch (err) {\r\n      console.error('Error selecting organization:', err);\r\n    }\r\n  };\r\n\r\n  // --- Excel Upload & Import ---\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    setUploadFileName(file.name);\r\n\r\n    if (file.name.endsWith('.csv')) {\r\n      Papa.parse(file, {\r\n        header: true,\r\n        skipEmptyLines: true,\r\n        complete: (results) => {\r\n          setExcelData(results.data);\r\n          setExcelColumns(Object.keys(results.data[0] || {}));\r\n          setStep(2);\r\n        },\r\n        error: () => setStep(1)\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      const data = evt.target.result;\r\n      const workbook = XLSX.read(data, { type: 'binary' });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const sheet = workbook.Sheets[sheetName];\r\n      const json = XLSX.utils.sheet_to_json(sheet, { defval: '' });\r\n      setExcelData(json);\r\n      setExcelColumns(Object.keys(json[0] || {}));\r\n      setStep(2);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  // --- Save column mapping and import to DB ---\r\n  const handleMappingSave = async (mapping) => {\r\n    setColumnMap(mapping);\r\n    const mappedRows = excelData.map(row => {\r\n      const mappedRow = {};\r\n      Object.entries(mapping).forEach(([dbField, excelCol]) => {\r\n        mappedRow[dbField] = row[excelCol] || '';\r\n      });\r\n      return mappedRow;\r\n    });\r\n\r\n    await fetch(`${API_BASE}/import-transactions`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        rows: mappedRows,\r\n        uploaderEmail: userEmail,\r\n        fileName: uploadFileName,\r\n        organizationId: selectedOrg?.id || null,\r\n        columnMap: mapping\r\n      })\r\n    });\r\n\r\n    // Reload imported transactions and project financials from DB\r\n    const importedRes = await fetch(`${API_BASE}/imported-transactions`);\r\n    const imported = await importedRes.json();\r\n    setImportedRows(imported);\r\n\r\n    const projFinRes = await fetch(`${API_BASE}/project-financials`);\r\n    const projFin = await projFinRes.json();\r\n    setProjectsFromDB(Array.isArray(projFin) ? projFin : []);\r\n\r\n    setStep(3);\r\n  };\r\n\r\n  // --- UI ---\r\n  return (\r\n    <>\r\n      <Header isLoggedIn={isLoggedIn} onLogout={onLogout} />\r\n      {view === 'organizations' && (\r\n        <OrganizationSelector\r\n          organizations={organizations}\r\n          onSelect={handleOrgSelect}\r\n        />\r\n      )}\r\n\r\n      {view === 'project' && selectedProject && (\r\n        <ProjectDashboard\r\n          project={selectedProject}\r\n          organization={selectedOrg}\r\n          onBack={() => setView('dashboard')}\r\n        />\r\n      )}\r\n\r\n      {view === 'dashboard' && (\r\n        <div style={{ maxWidth: 900, margin: '40px auto', padding: 24, background: '#fff', borderRadius: 10, boxShadow: '0 4px 24px #0001' }}>\r\n          <h2>Accounts Dashboard</h2>\r\n          {/* --- Excel Import Steps --- */}\r\n          {step === 1 && (\r\n            <div style={{ marginTop: 40 }}>\r\n              <p>Upload Excel/CSV to import transactions:</p>\r\n              <input type=\"file\" accept=\".xlsx,.xls,.csv\" onChange={handleFileUpload} />\r\n            </div>\r\n          )}\r\n          {step === 2 && (\r\n            <MappingModal\r\n              columns={excelColumns}\r\n              onMap={handleMappingSave}\r\n              onCancel={() => setStep(1)}\r\n            />\r\n          )}\r\n          {step === 3 && (\r\n            <>\r\n              <h3>Imported Transactions</h3>\r\n              <div style={{ maxHeight: 300, overflow: 'auto', marginBottom: 24 }}>\r\n                <table style={{ width: '100%', fontSize: 13 }}>\r\n                  <thead>\r\n                    <tr>\r\n                      {dbFields.map(f => <th key={f}>{f}</th>)}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {importedRows.slice(0, 20).map((row, idx) => (\r\n                      <tr key={idx}>\r\n                        {dbFields.map(f => <td key={f}>{row[f]}</td>)}\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <h3>Project Financials</h3>\r\n              <table style={{ width: '100%', background: '#fff', borderRadius: 8, boxShadow: '0 2px 8px #0001', fontSize: 14 }}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Project Name</th>\r\n                    <th>AR</th>\r\n                    <th>AP</th>\r\n                    <th>Profit</th>\r\n                    <th>Loss</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {projectsFromDB.map(p => (\r\n                    <tr key={p.ProjectID}>\r\n                      <td>{p.ProjectName}</td>\r\n                      <td>₹{p.AR.toLocaleString()}</td>\r\n                      <td>₹{p.AP.toLocaleString()}</td>\r\n                      <td style={{ color: p.Profit >= 0 ? 'green' : 'red' }}>₹{p.Profit.toLocaleString()}</td>\r\n                      <td style={{ color: p.Loss > 0 ? 'red' : 'inherit' }}>₹{p.Loss.toLocaleString()}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </>\r\n          )}\r\n\r\n          {/* --- Existing CompanyDashboard --- */}\r\n          <CompanyDashboard\r\n            organization={selectedOrg}\r\n            selectedDept={selectedDept}\r\n            onDeptChange={setSelectedDept}\r\n            onProjectSelect={setSelectedProject}\r\n            onAddProject={setShowNewProjectForm}\r\n            onFileUpload={handleFileUpload}\r\n            onBack={() => setView('organizations')}\r\n            projects={rawProjects}\r\n            totals={totals}\r\n          />\r\n          {showNewProjectForm && selectedOrg && (\r\n            <NewProjectModal\r\n              organizationId={selectedOrg.id}\r\n              departments={departments}\r\n              onCreated={() => handleOrgSelect(selectedOrg.id)}\r\n              onCancel={() => setShowNewProjectForm(false)}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// --- Mapping Modal Component ---\r\nconst MappingModal = ({ columns, onMap, onCancel }) => {\r\n  const [map, setMap] = useState({});\r\n  return (\r\n    <div style={{ marginTop: 40 }}>\r\n      <h3>Map Excel Columns to DB Fields</h3>\r\n      {dbFields.map(field => (\r\n        <div key={field} style={{ marginBottom: 8 }}>\r\n          <label>{field}: </label>\r\n          <select value={map[field] || ''} onChange={e => setMap(m => ({ ...m, [field]: e.target.value }))}>\r\n            <option value=\"\">-- Select --</option>\r\n            {columns.map(col => <option key={col} value={col}>{col}</option>)}\r\n          </select>\r\n        </div>\r\n      ))}\r\n      <button onClick={() => onMap(map)} style={{ marginRight: 12 }}>Save Mapping & Import</button>\r\n      <button onClick={onCancel}>Cancel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrganizationDashboard;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,cAAc;AAC9C,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,yBAAyB;AAChC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAC5B,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhD,MAAMC,QAAQ,GAAG,uBAAuB;AACxC,MAAMC,QAAQ,GAAG,CACf,gBAAgB,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,aAAa,CAClH;AAED,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,eAAA,EAAAC,gBAAA;EAC1D,MAAMC,QAAQ,GAAGpB,WAAW,CAAC,CAAC;EAC9B,MAAMqB,SAAS,GAAG,EAAAH,eAAA,GAAAE,QAAQ,CAACE,KAAK,cAAAJ,eAAA,uBAAdA,eAAA,CAAgBG,SAAS,KAAI,EAAE;EACjD,MAAME,cAAc,GAAG,EAAAJ,gBAAA,GAAAC,QAAQ,CAACE,KAAK,cAAAH,gBAAA,uBAAdA,gBAAA,CAAgBI,cAAc,KAAI,IAAI;;EAE7D;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG9B,QAAQ,CAAC,MAAM+B,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,eAAe,CAAC;EAChG,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGlC,QAAQ,CAAC,MAAM;IACnD,MAAMmC,GAAG,GAAGJ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAC/C,OAAOG,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACF,GAAG,CAAC,GAAG,IAAI;EACrC,CAAC,CAAC;EACF,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGvC,QAAQ,CAAC,MAAM+B,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,KAAK,CAAC;EACrG,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGzC,QAAQ,CAAC,MAAM;IAC3D,MAAM0C,IAAI,GAAGX,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACpD,OAAOU,IAAI,GAAGN,IAAI,CAACC,KAAK,CAACK,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC,CAAC;EACF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG5C,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC6C,WAAW,EAAEC,cAAc,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC+C,WAAW,EAAEC,cAAc,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiD,MAAM,EAAEC,SAAS,CAAC,GAAGlD,QAAQ,CAAC;IAAEmD,MAAM,EAAC,CAAC;IAAEC,KAAK,EAAC,CAAC;IAAEC,MAAM,EAAC,CAAC;IAAEC,EAAE,EAAC,CAAC;IAAEC,EAAE,EAAC,CAAC;IAAEC,IAAI,EAAC;EAAE,CAAC,CAAC;EACzF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG1D,QAAQ,CAAC,KAAK,CAAC;;EAEnE;EACA,MAAM,CAAC2D,SAAS,EAAEC,YAAY,CAAC,GAAG5D,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC6D,YAAY,EAAEC,eAAe,CAAC,GAAG9D,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC+D,SAAS,EAAEC,YAAY,CAAC,GAAGhE,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACiE,cAAc,EAAEC,iBAAiB,CAAC,GAAGlE,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmE,YAAY,EAAEC,eAAe,CAAC,GAAGpE,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACqE,cAAc,EAAEC,iBAAiB,CAAC,GAAGtE,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACuE,IAAI,EAAEC,OAAO,CAAC,GAAGxE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAErC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMwE,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAG1D,QAAQ,gBAAgB,CAAC;QACpD,MAAM2D,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;QAC7B,MAAMC,MAAM,GAAGF,IAAI,CAACG,GAAG,CAACC,CAAC,KAAK;UAC5BC,EAAE,EAAED,CAAC,CAACE,cAAc;UACpBC,IAAI,EAAEH,CAAC,CAACI,IAAI;UACZC,IAAI,EAAEL,CAAC,CAACM,IAAI,IAAI,EAAE;UAClBC,WAAW,EAAEP,CAAC,CAACQ,WAAW,IAAI,EAAE;UAChCC,IAAI,EAAET,CAAC,CAACI,IAAI,IAAIJ,CAAC,CAACI,IAAI,CAACM,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,aAAa,CAAC,GAAGxF,IAAI,GAAGD,SAAS;UAC/E0F,KAAK,EAAEZ,CAAC,CAACI,IAAI,IAAIJ,CAAC,CAACI,IAAI,CAACM,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,WAAW,CAAC,GAAG,SAAS,GAAG;QAC5E,CAAC,CAAC,CAAC;QACH/C,gBAAgB,CAACkC,MAAM,CAAC;MAC1B,CAAC,CAAC,OAAOe,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;MACpD;IACF,CAAC;IACDpB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMuB,eAAe,GAAG,MAAOC,KAAK,IAAK;IACvC1D,eAAe,CAAC,KAAK,CAAC;IACtBE,kBAAkB,CAAC,IAAI,CAAC;IACxBX,OAAO,CAAC,WAAW,CAAC;IACpB0C,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEZ,IAAI;MAAA,IAAA0B,mBAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,oBAAA;MACF,MAAMC,MAAM,GAAG,MAAM5B,KAAK,CAAC,GAAG1D,QAAQ,kBAAkBgF,KAAK,EAAE,CAAC;MAChE,MAAMO,OAAO,GAAG,MAAMD,MAAM,CAAC1B,IAAI,CAAC,CAAC;MAEnC,MAAM4B,OAAO,GAAG,MAAM9B,KAAK,CAAC,GAAG1D,QAAQ,4BAA4BgF,KAAK,EAAE,CAAC;MAC3E,MAAMS,QAAQ,GAAG,MAAMD,OAAO,CAAC5B,IAAI,CAAC,CAAC;MAErC,MAAM8B,OAAO,GAAG,MAAMhC,KAAK,CAAC,GAAG1D,QAAQ,+BAA+BgF,KAAK,EAAE,CAAC;MAC9E,MAAMW,QAAQ,GAAG,MAAMD,OAAO,CAAC9B,IAAI,CAAC,CAAC;MAErC,MAAMgC,cAAc,GAAG,CAACH,QAAQ,IAAI,EAAE,EAAE3B,GAAG,CAAC+B,CAAC,KAAK;QAChD7B,EAAE,EAAE6B,CAAC,CAACC,SAAS,IAAID,CAAC,CAACE,SAAS,IAAIF,CAAC,CAAC7B,EAAE;QACtCE,IAAI,EAAE2B,CAAC,CAACG,WAAW,IAAIH,CAAC,CAAC1B,IAAI,IAAI,EAAE;QACnC8B,MAAM,EAAE,CAACJ,CAAC,CAACK,MAAM,IAAI,EAAE,EAAEC,QAAQ,CAAC,CAAC;QACnCjE,MAAM,EAAEkE,MAAM,CAACP,CAAC,CAACQ,MAAM,IAAI,CAAC,CAAC;QAC7BlE,KAAK,EAAEiE,MAAM,CAACP,CAAC,CAACS,QAAQ,IAAI,CAAC,CAAC;QAC9BlE,MAAM,EAAEgE,MAAM,CAACP,CAAC,CAACU,MAAM,KAAKC,SAAS,GAAGX,CAAC,CAACU,MAAM,GAAIH,MAAM,CAACP,CAAC,CAACQ,MAAM,IAAI,CAAC,CAAC,GAAGD,MAAM,CAACP,CAAC,CAACS,QAAQ,IAAI,CAAC,CAAE,CAAC;QACrGjE,EAAE,EAAE+D,MAAM,CAACP,CAAC,CAACY,EAAE,IAAI,CAAC,CAAC;QACrBnE,EAAE,EAAE8D,MAAM,CAACP,CAAC,CAACa,EAAE,KAAKF,SAAS,GAAGX,CAAC,CAACa,EAAE,GAAGN,MAAM,CAACP,CAAC,CAACS,QAAQ,IAAI,CAAC,CAAC,CAAC;QAC/D/D,IAAI,EAAE6D,MAAM,CAACP,CAAC,CAACc,IAAI,IAAI,CAAC,CAAC;QACzBC,QAAQ,EAAEf,CAAC,CAACgB,OAAO,IAAIhB,CAAC,CAACe,QAAQ,IAAI,EAAE;QACvCE,cAAc,EAAEjB,CAAC,CAACkB,cAAc,IAAI;MACtC,CAAC,CAAC,CAAC;MAEHlF,cAAc,CAAC+D,cAAc,CAAC;MAC9B3E,cAAc,CAAC;QACb+C,EAAE,EAAEuB,OAAO,CAACtB,cAAc,IAAIe,KAAK;QACnCd,IAAI,EAAEqB,OAAO,CAACpB,IAAI,IAAIoB,OAAO,CAACpB,IAAI,CAAC6C,IAAI,CAAC,CAAC,GAAGzB,OAAO,CAACpB,IAAI,GAAI,EAAAc,mBAAA,GAAAvD,aAAa,CAACuF,IAAI,CAAClD,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKgB,KAAK,CAAC,cAAAC,mBAAA,uBAAvCA,mBAAA,CAAyCf,IAAI,KAAI,EAAG;QAChHE,IAAI,EAAEmB,OAAO,CAAClB,IAAI,IAAIkB,OAAO,CAAClB,IAAI,CAAC2C,IAAI,CAAC,CAAC,GAAGzB,OAAO,CAAClB,IAAI,GAAI,EAAAa,oBAAA,GAAAxD,aAAa,CAACuF,IAAI,CAAClD,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKgB,KAAK,CAAC,cAAAE,oBAAA,uBAAvCA,oBAAA,CAAyCd,IAAI,KAAI,EAAG;QAChHE,WAAW,EAAEiB,OAAO,CAAChB,WAAW,IAAIgB,OAAO,CAAChB,WAAW,CAACyC,IAAI,CAAC,CAAC,GAAGzB,OAAO,CAAChB,WAAW,GAAI,EAAAY,oBAAA,GAAAzD,aAAa,CAACuF,IAAI,CAAClD,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKgB,KAAK,CAAC,cAAAG,oBAAA,uBAAvCA,oBAAA,CAAyCb,WAAW,KAAI,EAAG;QACnJ4C,QAAQ,EAAEtB,cAAc;QACxBjB,KAAK,EAAE,EAAAS,oBAAA,GAAA1D,aAAa,CAACuF,IAAI,CAAClD,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKgB,KAAK,CAAC,cAAAI,oBAAA,uBAAvCA,oBAAA,CAAyCT,KAAK,KAAI,SAAS;QAClEH,IAAI,EAAE,EAAAa,oBAAA,GAAA3D,aAAa,CAACuF,IAAI,CAAClD,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKgB,KAAK,CAAC,cAAAK,oBAAA,uBAAvCA,oBAAA,CAAyCb,IAAI,KAAIvF;MACzD,CAAC,CAAC;MAEF8C,cAAc,CAAC,CAAC4D,QAAQ,IAAI,EAAE,EAAE7B,GAAG,CAACqD,CAAC,KAAK;QAAEnD,EAAE,EAAEmD,CAAC,CAACC,YAAY;QAAElD,IAAI,EAAEiD,CAAC,CAAChD;MAAK,CAAC,CAAC,CAAC,CAAC;IACnF,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;IACrD;EACF,CAAC;;EAED;EACA,MAAMyC,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACF,IAAI,EAAE;IACXtE,iBAAiB,CAACsE,IAAI,CAACrD,IAAI,CAAC;IAE5B,IAAIqD,IAAI,CAACrD,IAAI,CAACwD,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC9BhI,IAAI,CAAC0B,KAAK,CAACmG,IAAI,EAAE;QACfI,MAAM,EAAE,IAAI;QACZC,cAAc,EAAE,IAAI;QACpBC,QAAQ,EAAGC,OAAO,IAAK;UACrBnF,YAAY,CAACmF,OAAO,CAACnE,IAAI,CAAC;UAC1Bd,eAAe,CAACkF,MAAM,CAACC,IAAI,CAACF,OAAO,CAACnE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;UACnDJ,OAAO,CAAC,CAAC,CAAC;QACZ,CAAC;QACDuB,KAAK,EAAEA,CAAA,KAAMvB,OAAO,CAAC,CAAC;MACxB,CAAC,CAAC;MACF;IACF;IAEA,MAAM0E,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,GAAG,IAAK;MACvB,MAAMzE,IAAI,GAAGyE,GAAG,CAACZ,MAAM,CAACa,MAAM;MAC9B,MAAMC,QAAQ,GAAG7I,IAAI,CAAC8I,IAAI,CAAC5E,IAAI,EAAE;QAAES,IAAI,EAAE;MAAS,CAAC,CAAC;MACpD,MAAMoE,SAAS,GAAGF,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;MACxC,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,MAAM,CAACH,SAAS,CAAC;MACxC,MAAM5E,IAAI,GAAGnE,IAAI,CAACmJ,KAAK,CAACC,aAAa,CAACH,KAAK,EAAE;QAAEI,MAAM,EAAE;MAAG,CAAC,CAAC;MAC5DnG,YAAY,CAACiB,IAAI,CAAC;MAClBf,eAAe,CAACkF,MAAM,CAACC,IAAI,CAACpE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MAC3CL,OAAO,CAAC,CAAC,CAAC;IACZ,CAAC;IACD0E,MAAM,CAACc,kBAAkB,CAACxB,IAAI,CAAC;EACjC,CAAC;;EAED;EACA,MAAMyB,iBAAiB,GAAG,MAAOC,OAAO,IAAK;IAC3ClG,YAAY,CAACkG,OAAO,CAAC;IACrB,MAAMC,UAAU,GAAGxG,SAAS,CAACoB,GAAG,CAACqF,GAAG,IAAI;MACtC,MAAMC,SAAS,GAAG,CAAC,CAAC;MACpBrB,MAAM,CAACsB,OAAO,CAACJ,OAAO,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,OAAO,EAAEC,QAAQ,CAAC,KAAK;QACvDJ,SAAS,CAACG,OAAO,CAAC,GAAGJ,GAAG,CAACK,QAAQ,CAAC,IAAI,EAAE;MAC1C,CAAC,CAAC;MACF,OAAOJ,SAAS;IAClB,CAAC,CAAC;IAEF,MAAM1F,KAAK,CAAC,GAAG1D,QAAQ,sBAAsB,EAAE;MAC7CyJ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAExI,IAAI,CAACyI,SAAS,CAAC;QACnBC,IAAI,EAAEX,UAAU;QAChBY,aAAa,EAAErJ,SAAS;QACxBsJ,QAAQ,EAAE/G,cAAc;QACxBrC,cAAc,EAAE,CAAAK,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEgD,EAAE,KAAI,IAAI;QACvClB,SAAS,EAAEmG;MACb,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMe,WAAW,GAAG,MAAMtG,KAAK,CAAC,GAAG1D,QAAQ,wBAAwB,CAAC;IACpE,MAAMiK,QAAQ,GAAG,MAAMD,WAAW,CAACpG,IAAI,CAAC,CAAC;IACzCT,eAAe,CAAC8G,QAAQ,CAAC;IAEzB,MAAMC,UAAU,GAAG,MAAMxG,KAAK,CAAC,GAAG1D,QAAQ,qBAAqB,CAAC;IAChE,MAAMmK,OAAO,GAAG,MAAMD,UAAU,CAACtG,IAAI,CAAC,CAAC;IACvCP,iBAAiB,CAAC+G,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,GAAGA,OAAO,GAAG,EAAE,CAAC;IAExD5G,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC;;EAED;EACA,oBACE1D,OAAA,CAAAE,SAAA;IAAAuK,QAAA,gBACEzK,OAAA,CAACL,MAAM;MAACW,UAAU,EAAEA,UAAW;MAACC,QAAQ,EAAEA;IAAS;MAAA2J,QAAA,EAAAQ,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACrD7J,IAAI,KAAK,eAAe,iBACvBf,OAAA,CAACR,oBAAoB;MACnBqC,aAAa,EAAEA,aAAc;MAC7BgJ,QAAQ,EAAE3F;IAAgB;MAAAgF,QAAA,EAAAQ,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CACF,EAEA7J,IAAI,KAAK,SAAS,IAAIW,eAAe,iBACpC1B,OAAA,CAACN,gBAAgB;MACfoL,OAAO,EAAEpJ,eAAgB;MACzBqJ,YAAY,EAAE5J,WAAY;MAC1B6J,MAAM,EAAEA,CAAA,KAAMhK,OAAO,CAAC,WAAW;IAAE;MAAAkJ,QAAA,EAAAQ,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CACF,EAEA7J,IAAI,KAAK,WAAW,iBACnBf,OAAA;MAAKiL,KAAK,EAAE;QAAEC,QAAQ,EAAE,GAAG;QAAEC,MAAM,EAAE,WAAW;QAAEC,OAAO,EAAE,EAAE;QAAEC,UAAU,EAAE,MAAM;QAAEC,YAAY,EAAE,EAAE;QAAEC,SAAS,EAAE;MAAmB,CAAE;MAAAd,QAAA,gBACnIzK,OAAA;QAAAyK,QAAA,EAAI;MAAkB;QAAAP,QAAA,EAAAQ,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAE1BnH,IAAI,KAAK,CAAC,iBACTzD,OAAA;QAAKiL,KAAK,EAAE;UAAEO,SAAS,EAAE;QAAG,CAAE;QAAAf,QAAA,gBAC5BzK,OAAA;UAAAyK,QAAA,EAAG;QAAwC;UAAAP,QAAA,EAAAQ,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC/C5K,OAAA;UAAOuE,IAAI,EAAC,MAAM;UAACkH,MAAM,EAAC,iBAAiB;UAACC,QAAQ,EAAElE;QAAiB;UAAA0C,QAAA,EAAAQ,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAV,QAAA,EAAAQ,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvE,CACN,EACAnH,IAAI,KAAK,CAAC,iBACTzD,OAAA,CAAC2L,YAAY;QACXC,OAAO,EAAE7I,YAAa;QACtB8I,KAAK,EAAE1C,iBAAkB;QACzB2C,QAAQ,EAAEA,CAAA,KAAMpI,OAAO,CAAC,CAAC;MAAE;QAAAwG,QAAA,EAAAQ,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CACF,EACAnH,IAAI,KAAK,CAAC,iBACTzD,OAAA,CAAAE,SAAA;QAAAuK,QAAA,gBACEzK,OAAA;UAAAyK,QAAA,EAAI;QAAqB;UAAAP,QAAA,EAAAQ,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9B5K,OAAA;UAAKiL,KAAK,EAAE;YAAEc,SAAS,EAAE,GAAG;YAAEC,QAAQ,EAAE,MAAM;YAAEC,YAAY,EAAE;UAAG,CAAE;UAAAxB,QAAA,eACjEzK,OAAA;YAAOiL,KAAK,EAAE;cAAEiB,KAAK,EAAE,MAAM;cAAEC,QAAQ,EAAE;YAAG,CAAE;YAAA1B,QAAA,gBAC5CzK,OAAA;cAAAyK,QAAA,eACEzK,OAAA;gBAAAyK,QAAA,EACGrK,QAAQ,CAAC6D,GAAG,CAACmI,CAAC,iBAAIpM,OAAA;kBAAAyK,QAAA,EAAa2B;gBAAC,GAALA,CAAC;kBAAAlC,QAAA,EAAAQ,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAS,CAAC;cAAC;gBAAAV,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACtC;YAAC;cAAAV,QAAA,EAAAQ,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC,eACR5K,OAAA;cAAAyK,QAAA,EACGpH,YAAY,CAACgJ,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACpI,GAAG,CAAC,CAACqF,GAAG,EAAEgD,GAAG,kBACtCtM,OAAA;gBAAAyK,QAAA,EACGrK,QAAQ,CAAC6D,GAAG,CAACmI,CAAC,iBAAIpM,OAAA;kBAAAyK,QAAA,EAAanB,GAAG,CAAC8C,CAAC;gBAAC,GAAVA,CAAC;kBAAAlC,QAAA,EAAAQ,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAc,CAAC;cAAC,GADtC0B,GAAG;gBAAApC,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAER,CACL;YAAC;cAAAV,QAAA,EAAAQ,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACG,CAAC;UAAA;YAAAV,QAAA,EAAAQ,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC;UAAAV,QAAA,EAAAQ,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACN5K,OAAA;UAAAyK,QAAA,EAAI;QAAkB;UAAAP,QAAA,EAAAQ,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3B5K,OAAA;UAAOiL,KAAK,EAAE;YAAEiB,KAAK,EAAE,MAAM;YAAEb,UAAU,EAAE,MAAM;YAAEC,YAAY,EAAE,CAAC;YAAEC,SAAS,EAAE,iBAAiB;YAAEY,QAAQ,EAAE;UAAG,CAAE;UAAA1B,QAAA,gBAC/GzK,OAAA;YAAAyK,QAAA,eACEzK,OAAA;cAAAyK,QAAA,gBACEzK,OAAA;gBAAAyK,QAAA,EAAI;cAAY;gBAAAP,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACrB5K,OAAA;gBAAAyK,QAAA,EAAI;cAAE;gBAAAP,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACX5K,OAAA;gBAAAyK,QAAA,EAAI;cAAE;gBAAAP,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACX5K,OAAA;gBAAAyK,QAAA,EAAI;cAAM;gBAAAP,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACf5K,OAAA;gBAAAyK,QAAA,EAAI;cAAI;gBAAAP,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAV,QAAA,EAAAQ,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACX;UAAC;YAAAV,QAAA,EAAAQ,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACR5K,OAAA;YAAAyK,QAAA,EACGlH,cAAc,CAACU,GAAG,CAAC+B,CAAC,iBACnBhG,OAAA;cAAAyK,QAAA,gBACEzK,OAAA;gBAAAyK,QAAA,EAAKzE,CAAC,CAACG;cAAW;gBAAA+D,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACxB5K,OAAA;gBAAAyK,QAAA,GAAI,QAAC,EAACzE,CAAC,CAACY,EAAE,CAAC2F,cAAc,CAAC,CAAC;cAAA;gBAAArC,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACjC5K,OAAA;gBAAAyK,QAAA,GAAI,QAAC,EAACzE,CAAC,CAACa,EAAE,CAAC0F,cAAc,CAAC,CAAC;cAAA;gBAAArC,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACjC5K,OAAA;gBAAIiL,KAAK,EAAE;kBAAEnG,KAAK,EAAEkB,CAAC,CAACU,MAAM,IAAI,CAAC,GAAG,OAAO,GAAG;gBAAM,CAAE;gBAAA+D,QAAA,GAAC,QAAC,EAACzE,CAAC,CAACU,MAAM,CAAC6F,cAAc,CAAC,CAAC;cAAA;gBAAArC,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACxF5K,OAAA;gBAAIiL,KAAK,EAAE;kBAAEnG,KAAK,EAAEkB,CAAC,CAACwG,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG;gBAAU,CAAE;gBAAA/B,QAAA,GAAC,QAAC,EAACzE,CAAC,CAACwG,IAAI,CAACD,cAAc,CAAC,CAAC;cAAA;gBAAArC,QAAA,EAAAQ,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GAL9E5E,CAAC,CAACC,SAAS;cAAAiE,QAAA,EAAAQ,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAMhB,CACL;UAAC;YAAAV,QAAA,EAAAQ,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAV,QAAA,EAAAQ,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA,eACR,CACH,eAGD5K,OAAA,CAACP,gBAAgB;QACfsL,YAAY,EAAE5J,WAAY;QAC1BK,YAAY,EAAEA,YAAa;QAC3BiL,YAAY,EAAEhL,eAAgB;QAC9BiL,eAAe,EAAE/K,kBAAmB;QACpCgL,YAAY,EAAE/J,qBAAsB;QACpCgK,YAAY,EAAEpF,gBAAiB;QAC/BwD,MAAM,EAAEA,CAAA,KAAMhK,OAAO,CAAC,eAAe,CAAE;QACvCqG,QAAQ,EAAEtF,WAAY;QACtBI,MAAM,EAAEA;MAAO;QAAA+H,QAAA,EAAAQ,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB,CAAC,EACDjI,kBAAkB,IAAIxB,WAAW,iBAChCnB,OAAA,CAACF,eAAe;QACdgB,cAAc,EAAEK,WAAW,CAACgD,EAAG;QAC/BlC,WAAW,EAAEA,WAAY;QACzB4K,SAAS,EAAEA,CAAA,KAAM3H,eAAe,CAAC/D,WAAW,CAACgD,EAAE,CAAE;QACjD2H,QAAQ,EAAEA,CAAA,KAAMlJ,qBAAqB,CAAC,KAAK;MAAE;QAAAsH,QAAA,EAAAQ,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CACF;IAAA;MAAAV,QAAA,EAAAQ,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA,eACD,CAAC;AAEP,CAAC;;AAED;AAAApK,EAAA,CArRMH,qBAAqB;EAAA,QACRd,WAAW;AAAA;AAAAuN,EAAA,GADxBzM,qBAAqB;AAsR3B,MAAMsL,YAAY,GAAGA,CAAC;EAAEC,OAAO;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAiB,GAAA;EACrD,MAAM,CAAC9I,GAAG,EAAE+I,MAAM,CAAC,GAAG9N,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClC,oBACEc,OAAA;IAAKiL,KAAK,EAAE;MAAEO,SAAS,EAAE;IAAG,CAAE;IAAAf,QAAA,gBAC5BzK,OAAA;MAAAyK,QAAA,EAAI;IAA8B;MAAAP,QAAA,EAAAQ,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtCxK,QAAQ,CAAC6D,GAAG,CAACgJ,KAAK,iBACjBjN,OAAA;MAAiBiL,KAAK,EAAE;QAAEgB,YAAY,EAAE;MAAE,CAAE;MAAAxB,QAAA,gBAC1CzK,OAAA;QAAAyK,QAAA,GAAQwC,KAAK,EAAC,IAAE;MAAA;QAAA/C,QAAA,EAAAQ,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACxB5K,OAAA;QAAQkN,KAAK,EAAEjJ,GAAG,CAACgJ,KAAK,CAAC,IAAI,EAAG;QAACvB,QAAQ,EAAEjE,CAAC,IAAIuF,MAAM,CAACG,CAAC,KAAK;UAAE,GAAGA,CAAC;UAAE,CAACF,KAAK,GAAGxF,CAAC,CAACE,MAAM,CAACuF;QAAM,CAAC,CAAC,CAAE;QAAAzC,QAAA,gBAC/FzK,OAAA;UAAQkN,KAAK,EAAC,EAAE;UAAAzC,QAAA,EAAC;QAAY;UAAAP,QAAA,EAAAQ,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACrCgB,OAAO,CAAC3H,GAAG,CAACmJ,GAAG,iBAAIpN,OAAA;UAAkBkN,KAAK,EAAEE,GAAI;UAAA3C,QAAA,EAAE2C;QAAG,GAArBA,GAAG;UAAAlD,QAAA,EAAAQ,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA2B,CAAC,CAAC;MAAA;QAAAV,QAAA,EAAAQ,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC;IAAA,GALDqC,KAAK;MAAA/C,QAAA,EAAAQ,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMV,CACN,CAAC,eACF5K,OAAA;MAAQqN,OAAO,EAAEA,CAAA,KAAMxB,KAAK,CAAC5H,GAAG,CAAE;MAACgH,KAAK,EAAE;QAAEqC,WAAW,EAAE;MAAG,CAAE;MAAA7C,QAAA,EAAC;IAAqB;MAAAP,QAAA,EAAAQ,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC7F5K,OAAA;MAAQqN,OAAO,EAAEvB,QAAS;MAAArB,QAAA,EAAC;IAAM;MAAAP,QAAA,EAAAQ,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAV,QAAA,EAAAQ,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACmC,GAAA,CAlBIpB,YAAY;AAAA4B,GAAA,GAAZ5B,YAAY;AAoBlB,eAAetL,qBAAqB;AAAC,IAAAyM,EAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAV,EAAA;AAAAU,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}