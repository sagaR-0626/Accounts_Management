{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VivekReddyMeka\\\\Desktop\\\\Accounts_Management\\\\src\\\\Components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Building2, Code } from 'lucide-react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport OrganizationSelector from './OrganizationSelector';\nimport CompanyDashboard from './CompanyDashboard';\nimport ProjectDashboard from './ProjectDashboard';\nimport Header from './Header';\nimport '../Styles/Dashboard.css';\nimport * as XLSX from 'xlsx';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = 'http://localhost:3001';\nconst dbFields = ['OrganizationID', 'OrgName', 'TxnID', 'TxnDate', 'Category', 'Item', 'Type', 'Amount', 'ProjectID', 'ProjectName'];\nconst DashboardCard = ({\n  title,\n  value,\n  color\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    flex: '1 1 0',\n    background: color,\n    color: '#fff',\n    borderRadius: 12,\n    padding: '32px 24px',\n    textAlign: 'center',\n    boxShadow: '0 2px 8px #0002',\n    minWidth: 200,\n    fontSize: 20\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: 18,\n      marginBottom: 8\n    },\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: 32,\n      fontWeight: 700\n    },\n    children: [\"\\u20B9\", Number(value).toLocaleString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 3\n}, this);\n_c = DashboardCard;\nconst OrganizationDashboard = ({\n  isLoggedIn,\n  onLogout\n}) => {\n  _s();\n  var _location$state, _location$state2;\n  const location = useLocation();\n  const userEmail = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.userEmail) || '';\n  const organizationId = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.organizationId) || null;\n\n  // --- State declarations ---\n  const [view, setView] = useState(() => localStorage.getItem('dashboardView') || 'organizations');\n  const [selectedOrg, setSelectedOrg] = useState(() => {\n    const org = localStorage.getItem('selectedOrg');\n    return org ? JSON.parse(org) : null;\n  });\n  const [selectedDept, setSelectedDept] = useState(() => localStorage.getItem('selectedDept') || 'all');\n  const [selectedProject, setSelectedProject] = useState(() => {\n    const proj = localStorage.getItem('selectedProject');\n    return proj ? JSON.parse(proj) : null;\n  });\n  const [organizations, setOrganizations] = useState([]);\n  const [rawProjects, setRawProjects] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [totals, setTotals] = useState({\n    budget: 0,\n    spent: 0,\n    profit: 0,\n    ar: 0,\n    ap: 0,\n    team: 0\n  });\n  const [showNewProjectForm, setShowNewProjectForm] = useState(false);\n\n  // --- Excel/DB Import states ---\n  const [excelData, setExcelData] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [columnMap, setColumnMap] = useState({});\n  const [uploadFileName, setUploadFileName] = useState('');\n  const [importedRows, setImportedRows] = useState([]); // Use this for calculations, not for UI\n  const [projectsFromDB, setProjectsFromDB] = useState([]); // Use this for calculations, not for UI\n  const [step, setStep] = useState(1); // 1: upload, 2: map\n\n  // --- Load organizations ---\n  useEffect(() => {\n    const loadOrgs = async () => {\n      try {\n        const res = await fetch(`${API_BASE}/organizations`);\n        const data = await res.json();\n        const mapped = data.map(o => ({\n          id: o.OrganizationID,\n          name: o.Name,\n          type: o.Type || '',\n          description: o.Description || '',\n          icon: o.Name && o.Name.toLowerCase().includes('collabridge') ? Code : Building2,\n          color: o.Name && o.Name.toLowerCase().includes('la tierra') ? '#10b981' : '#3b82f6'\n        }));\n        setOrganizations(mapped);\n      } catch (err) {\n        console.error('Error loading organizations:', err);\n      }\n    };\n    loadOrgs();\n  }, []);\n\n  // --- Organization selection ---\n  const handleOrgSelect = async orgId => {\n    setSelectedDept('all');\n    setSelectedProject(null);\n    setView('dashboard');\n    setStep(1); // Reset import step\n\n    try {\n      var _organizations$find, _organizations$find2, _organizations$find3, _organizations$find4, _organizations$find5;\n      const orgRes = await fetch(`${API_BASE}/organizations/${orgId}`);\n      const orgData = await orgRes.json();\n      const projRes = await fetch(`${API_BASE}/projects?organizationId=${orgId}`);\n      const projRows = await projRes.json();\n      const deptRes = await fetch(`${API_BASE}/departments?organizationId=${orgId}`);\n      const deptRows = await deptRes.json();\n      const mappedProjects = (projRows || []).map(p => ({\n        id: p.ProjectID || p.ProjectId || p.id,\n        name: p.ProjectName || p.Name || '',\n        status: (p.Status || '').toString(),\n        budget: Number(p.Budget || 0),\n        spent: Number(p.Spending || 0),\n        profit: Number(p.Profit !== undefined ? p.Profit : Number(p.Budget || 0) - Number(p.Spending || 0)),\n        ar: Number(p.AR || 0),\n        ap: Number(p.AP !== undefined ? p.AP : Number(p.Spending || 0)),\n        team: Number(p.Team || 0),\n        deadline: p.EndDate || p.deadline || '',\n        departmentName: p.DepartmentName || ''\n      }));\n      setRawProjects(mappedProjects);\n      setSelectedOrg({\n        id: orgData.OrganizationID || orgId,\n        name: orgData.Name && orgData.Name.trim() ? orgData.Name : ((_organizations$find = organizations.find(o => o.id === orgId)) === null || _organizations$find === void 0 ? void 0 : _organizations$find.name) || '',\n        type: orgData.Type && orgData.Type.trim() ? orgData.Type : ((_organizations$find2 = organizations.find(o => o.id === orgId)) === null || _organizations$find2 === void 0 ? void 0 : _organizations$find2.type) || '',\n        description: orgData.Description && orgData.Description.trim() ? orgData.Description : ((_organizations$find3 = organizations.find(o => o.id === orgId)) === null || _organizations$find3 === void 0 ? void 0 : _organizations$find3.description) || '',\n        projects: mappedProjects,\n        color: ((_organizations$find4 = organizations.find(o => o.id === orgId)) === null || _organizations$find4 === void 0 ? void 0 : _organizations$find4.color) || '#3b82f6',\n        icon: ((_organizations$find5 = organizations.find(o => o.id === orgId)) === null || _organizations$find5 === void 0 ? void 0 : _organizations$find5.icon) || Building2\n      });\n      setDepartments((deptRows || []).map(d => ({\n        id: d.DepartmentID,\n        name: d.Name\n      })));\n    } catch (err) {\n      console.error('Error selecting organization:', err);\n    }\n  };\n\n  // --- Excel Upload & Direct Import ---\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    setUploadFileName(file.name);\n    let rows = [];\n    if (file.name.endsWith('.csv')) {\n      // Parse CSV\n      await new Promise((resolve, reject) => {\n        Papa.parse(file, {\n          header: true,\n          skipEmptyLines: true,\n          complete: results => {\n            rows = results.data;\n            resolve();\n          },\n          error: reject\n        });\n      });\n    } else {\n      // Parse Excel\n      const data = await new Promise(resolve => {\n        const reader = new FileReader();\n        reader.onload = evt => resolve(evt.target.result);\n        reader.readAsBinaryString(file);\n      });\n      const workbook = XLSX.read(data, {\n        type: 'binary'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      rows = XLSX.utils.sheet_to_json(sheet, {\n        defval: ''\n      });\n    }\n\n    // Directly send rows to backend (no mapping)\n    await fetch(`${API_BASE}/import-transactions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        rows,\n        uploaderEmail: userEmail,\n        fileName: file.name,\n        organizationId: (selectedOrg === null || selectedOrg === void 0 ? void 0 : selectedOrg.id) || null\n      })\n    });\n\n    // Fetch imported transactions and project financials from DB\n    const importedRes = await fetch(`${API_BASE}/imported-transactions`);\n    const imported = await importedRes.json();\n    setImportedRows(imported);\n    const projFinRes = await fetch(`${API_BASE}/project-financials`);\n    const projFin = await projFinRes.json();\n    setProjectsFromDB(Array.isArray(projFin) ? projFin : []);\n  };\n\n  // Calculate totals from projectsFromDB\n  const totalAR = projectsFromDB.reduce((sum, p) => sum + (Number(p.AR) || 0), 0);\n  const totalAP = projectsFromDB.reduce((sum, p) => sum + (Number(p.AP) || 0), 0);\n  const totalProfit = totalAR - totalAP;\n  const totalLoss = totalProfit < 0 ? Math.abs(totalProfit) : 0;\n\n  // --- UI ---\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      isLoggedIn: isLoggedIn,\n      onLogout: onLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), view === 'organizations' && /*#__PURE__*/_jsxDEV(OrganizationSelector, {\n      organizations: organizations,\n      onSelect: handleOrgSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this), view === 'project' && selectedProject && /*#__PURE__*/_jsxDEV(ProjectDashboard, {\n      project: selectedProject,\n      organization: selectedOrg,\n      onBack: () => setView('dashboard')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this), view === 'dashboard' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100vw',\n        minHeight: '100vh',\n        padding: '20px',\n        background: '#f5f5f5',\n        boxSizing: 'border-box'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          maxWidth: 'none',\n          margin: '0',\n          padding: '24px',\n          background: '#fff',\n          borderRadius: '10px',\n          boxShadow: '0 4px 24px rgba(0,0,0,0.1)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Accounts Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 40\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Upload Excel/CSV to import transactions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".xlsx,.xls,.csv\",\n            onChange: handleFileUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row',\n            gap: '32px',\n            width: '100%',\n            margin: '40px 0'\n          },\n          children: [/*#__PURE__*/_jsxDEV(DashboardCard, {\n            title: \"Accounts Receivable\",\n            value: totalAR,\n            color: \"#4caf50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DashboardCard, {\n            title: \"Accounts Payable\",\n            value: totalAP,\n            color: \"#f44336\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DashboardCard, {\n            title: \"Profit\",\n            value: totalProfit,\n            color: \"#2196f3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DashboardCard, {\n            title: \"Loss\",\n            value: totalLoss,\n            color: \"#ff9800\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CompanyDashboard, {\n          organization: selectedOrg,\n          selectedDept: selectedDept,\n          onDeptChange: setSelectedDept,\n          onProjectSelect: setSelectedProject,\n          onAddProject: setShowNewProjectForm,\n          onFileUpload: handleFileUpload,\n          onBack: () => setView('organizations'),\n          projects: rawProjects,\n          totals: totals\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(OrganizationDashboard, \"X6GxOUdjZbn5RjW4fpmPMwiuxII=\", false, function () {\n  return [useLocation];\n});\n_c2 = OrganizationDashboard;\nexport default OrganizationDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"DashboardCard\");\n$RefreshReg$(_c2, \"OrganizationDashboard\");","map":{"version":3,"names":["React","useState","useEffect","Building2","Code","useNavigate","useLocation","OrganizationSelector","CompanyDashboard","ProjectDashboard","Header","XLSX","Papa","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","dbFields","DashboardCard","title","value","color","style","flex","background","borderRadius","padding","textAlign","boxShadow","minWidth","fontSize","children","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","Number","toLocaleString","_c","OrganizationDashboard","isLoggedIn","onLogout","_s","_location$state","_location$state2","location","userEmail","state","organizationId","view","setView","localStorage","getItem","selectedOrg","setSelectedOrg","org","JSON","parse","selectedDept","setSelectedDept","selectedProject","setSelectedProject","proj","organizations","setOrganizations","rawProjects","setRawProjects","departments","setDepartments","totals","setTotals","budget","spent","profit","ar","ap","team","showNewProjectForm","setShowNewProjectForm","excelData","setExcelData","excelColumns","setExcelColumns","columnMap","setColumnMap","uploadFileName","setUploadFileName","importedRows","setImportedRows","projectsFromDB","setProjectsFromDB","step","setStep","loadOrgs","res","fetch","data","json","mapped","map","o","id","OrganizationID","name","Name","type","Type","description","Description","icon","toLowerCase","includes","err","console","error","handleOrgSelect","orgId","_organizations$find","_organizations$find2","_organizations$find3","_organizations$find4","_organizations$find5","orgRes","orgData","projRes","projRows","deptRes","deptRows","mappedProjects","p","ProjectID","ProjectId","ProjectName","status","Status","toString","Budget","Spending","Profit","undefined","AR","AP","Team","deadline","EndDate","departmentName","DepartmentName","trim","find","projects","d","DepartmentID","handleFileUpload","e","file","target","files","rows","endsWith","Promise","resolve","reject","header","skipEmptyLines","complete","results","reader","FileReader","onload","evt","result","readAsBinaryString","workbook","read","sheetName","SheetNames","sheet","Sheets","utils","sheet_to_json","defval","method","headers","body","stringify","uploaderEmail","importedRes","imported","projFinRes","projFin","Array","isArray","totalAR","reduce","sum","totalAP","totalProfit","totalLoss","Math","abs","onSelect","project","organization","onBack","width","minHeight","boxSizing","maxWidth","margin","marginTop","accept","onChange","display","flexDirection","gap","onDeptChange","onProjectSelect","onAddProject","onFileUpload","_c2","$RefreshReg$"],"sources":["C:/Users/VivekReddyMeka/Desktop/Accounts_Management/src/Components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Building2, Code } from 'lucide-react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport OrganizationSelector from './OrganizationSelector';\r\nimport CompanyDashboard from './CompanyDashboard';\r\nimport ProjectDashboard from './ProjectDashboard';\r\nimport Header from './Header';\r\nimport '../Styles/Dashboard.css';\r\nimport * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\n\r\nconst API_BASE = 'http://localhost:3001';\r\nconst dbFields = [\r\n  'OrganizationID', 'OrgName', 'TxnID', 'TxnDate', 'Category', 'Item', 'Type', 'Amount', 'ProjectID', 'ProjectName'\r\n];\r\n\r\nconst DashboardCard = ({ title, value, color }) => (\r\n  <div\r\n    style={{\r\n      flex: '1 1 0',\r\n      background: color,\r\n      color: '#fff',\r\n      borderRadius: 12,\r\n      padding: '32px 24px',\r\n      textAlign: 'center',\r\n      boxShadow: '0 2px 8px #0002',\r\n      minWidth: 200,\r\n      fontSize: 20\r\n    }}\r\n  >\r\n    <div style={{ fontSize: 18, marginBottom: 8 }}>{title}</div>\r\n    <div style={{ fontSize: 32, fontWeight: 700 }}>\r\n      ₹{Number(value).toLocaleString()}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst OrganizationDashboard = ({ isLoggedIn, onLogout }) => {\r\n  const location = useLocation();\r\n  const userEmail = location.state?.userEmail || '';\r\n  const organizationId = location.state?.organizationId || null;\r\n\r\n  // --- State declarations ---\r\n  const [view, setView] = useState(() => localStorage.getItem('dashboardView') || 'organizations');\r\n  const [selectedOrg, setSelectedOrg] = useState(() => {\r\n    const org = localStorage.getItem('selectedOrg');\r\n    return org ? JSON.parse(org) : null;\r\n  });\r\n  const [selectedDept, setSelectedDept] = useState(() => localStorage.getItem('selectedDept') || 'all');\r\n  const [selectedProject, setSelectedProject] = useState(() => {\r\n    const proj = localStorage.getItem('selectedProject');\r\n    return proj ? JSON.parse(proj) : null;\r\n  });\r\n  const [organizations, setOrganizations] = useState([]);\r\n  const [rawProjects, setRawProjects] = useState([]);\r\n  const [departments, setDepartments] = useState([]);\r\n  const [totals, setTotals] = useState({ budget:0, spent:0, profit:0, ar:0, ap:0, team:0 });\r\n  const [showNewProjectForm, setShowNewProjectForm] = useState(false);\r\n\r\n  // --- Excel/DB Import states ---\r\n  const [excelData, setExcelData] = useState([]);\r\n  const [excelColumns, setExcelColumns] = useState([]);\r\n  const [columnMap, setColumnMap] = useState({});\r\n  const [uploadFileName, setUploadFileName] = useState('');\r\n  const [importedRows, setImportedRows] = useState([]); // Use this for calculations, not for UI\r\n  const [projectsFromDB, setProjectsFromDB] = useState([]); // Use this for calculations, not for UI\r\n  const [step, setStep] = useState(1); // 1: upload, 2: map\r\n\r\n  // --- Load organizations ---\r\n  useEffect(() => {\r\n    const loadOrgs = async () => {\r\n      try {\r\n        const res = await fetch(`${API_BASE}/organizations`);\r\n        const data = await res.json();\r\n        const mapped = data.map(o => ({\r\n          id: o.OrganizationID,\r\n          name: o.Name,\r\n          type: o.Type || '',\r\n          description: o.Description || '',\r\n          icon: o.Name && o.Name.toLowerCase().includes('collabridge') ? Code : Building2,\r\n          color: o.Name && o.Name.toLowerCase().includes('la tierra') ? '#10b981' : '#3b82f6'\r\n        }));\r\n        setOrganizations(mapped);\r\n      } catch (err) {\r\n        console.error('Error loading organizations:', err);\r\n      }\r\n    };\r\n    loadOrgs();\r\n  }, []);\r\n\r\n  // --- Organization selection ---\r\n  const handleOrgSelect = async (orgId) => {\r\n    setSelectedDept('all');\r\n    setSelectedProject(null);\r\n    setView('dashboard');\r\n    setStep(1); // Reset import step\r\n\r\n    try {\r\n      const orgRes = await fetch(`${API_BASE}/organizations/${orgId}`);\r\n      const orgData = await orgRes.json();\r\n\r\n      const projRes = await fetch(`${API_BASE}/projects?organizationId=${orgId}`);\r\n      const projRows = await projRes.json();\r\n\r\n      const deptRes = await fetch(`${API_BASE}/departments?organizationId=${orgId}`);\r\n      const deptRows = await deptRes.json();\r\n\r\n      const mappedProjects = (projRows || []).map(p => ({\r\n        id: p.ProjectID || p.ProjectId || p.id,\r\n        name: p.ProjectName || p.Name || '',\r\n        status: (p.Status || '').toString(),\r\n        budget: Number(p.Budget || 0),\r\n        spent: Number(p.Spending || 0),\r\n        profit: Number(p.Profit !== undefined ? p.Profit : (Number(p.Budget || 0) - Number(p.Spending || 0))),\r\n        ar: Number(p.AR || 0),\r\n        ap: Number(p.AP !== undefined ? p.AP : Number(p.Spending || 0)),\r\n        team: Number(p.Team || 0),\r\n        deadline: p.EndDate || p.deadline || '',\r\n        departmentName: p.DepartmentName || ''\r\n      }));\r\n\r\n      setRawProjects(mappedProjects);\r\n      setSelectedOrg({\r\n        id: orgData.OrganizationID || orgId,\r\n        name: orgData.Name && orgData.Name.trim() ? orgData.Name : (organizations.find(o => o.id === orgId)?.name || ''),\r\n        type: orgData.Type && orgData.Type.trim() ? orgData.Type : (organizations.find(o => o.id === orgId)?.type || ''),\r\n        description: orgData.Description && orgData.Description.trim() ? orgData.Description : (organizations.find(o => o.id === orgId)?.description || ''),\r\n        projects: mappedProjects,\r\n        color: organizations.find(o => o.id === orgId)?.color || '#3b82f6',\r\n        icon: organizations.find(o => o.id === orgId)?.icon || Building2\r\n      });\r\n\r\n      setDepartments((deptRows || []).map(d => ({ id: d.DepartmentID, name: d.Name })));\r\n    } catch (err) {\r\n      console.error('Error selecting organization:', err);\r\n    }\r\n  };\r\n\r\n  // --- Excel Upload & Direct Import ---\r\n  const handleFileUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    setUploadFileName(file.name);\r\n\r\n    let rows = [];\r\n    if (file.name.endsWith('.csv')) {\r\n      // Parse CSV\r\n      await new Promise((resolve, reject) => {\r\n        Papa.parse(file, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => {\r\n            rows = results.data;\r\n            resolve();\r\n          },\r\n          error: reject\r\n        });\r\n      });\r\n    } else {\r\n      // Parse Excel\r\n      const data = await new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => resolve(evt.target.result);\r\n        reader.readAsBinaryString(file);\r\n      });\r\n      const workbook = XLSX.read(data, { type: 'binary' });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const sheet = workbook.Sheets[sheetName];\r\n      rows = XLSX.utils.sheet_to_json(sheet, { defval: '' });\r\n    }\r\n\r\n    // Directly send rows to backend (no mapping)\r\n    await fetch(`${API_BASE}/import-transactions`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        rows,\r\n        uploaderEmail: userEmail,\r\n        fileName: file.name,\r\n        organizationId: selectedOrg?.id || null\r\n      })\r\n    });\r\n\r\n    // Fetch imported transactions and project financials from DB\r\n    const importedRes = await fetch(`${API_BASE}/imported-transactions`);\r\n    const imported = await importedRes.json();\r\n    setImportedRows(imported);\r\n\r\n    const projFinRes = await fetch(`${API_BASE}/project-financials`);\r\n    const projFin = await projFinRes.json();\r\n    setProjectsFromDB(Array.isArray(projFin) ? projFin : []);\r\n  };\r\n\r\n  // Calculate totals from projectsFromDB\r\n  const totalAR = projectsFromDB.reduce((sum, p) => sum + (Number(p.AR) || 0), 0);\r\n  const totalAP = projectsFromDB.reduce((sum, p) => sum + (Number(p.AP) || 0), 0);\r\n  const totalProfit = totalAR - totalAP;\r\n  const totalLoss = totalProfit < 0 ? Math.abs(totalProfit) : 0;\r\n\r\n  // --- UI ---\r\n  return (\r\n    <>\r\n      <Header isLoggedIn={isLoggedIn} onLogout={onLogout} />\r\n      {view === 'organizations' && (\r\n        <OrganizationSelector\r\n          organizations={organizations}\r\n          onSelect={handleOrgSelect}\r\n        />\r\n      )}\r\n\r\n      {view === 'project' && selectedProject && (\r\n        <ProjectDashboard\r\n          project={selectedProject}\r\n          organization={selectedOrg}\r\n          onBack={() => setView('dashboard')}\r\n        />\r\n      )}\r\n\r\n      {view === 'dashboard' && (\r\n        <div style={{ \r\n          width: '100vw', \r\n          minHeight: '100vh', \r\n          padding: '20px', \r\n          background: '#f5f5f5',\r\n          boxSizing: 'border-box' \r\n        }}>\r\n          <div style={{ \r\n            width: '100%', \r\n            maxWidth: 'none', \r\n            margin: '0', \r\n            padding: '24px', \r\n            background: '#fff', \r\n            borderRadius: '10px', \r\n            boxShadow: '0 4px 24px rgba(0,0,0,0.1)' \r\n          }}>\r\n            <h2>Accounts Dashboard</h2>\r\n            <div style={{ marginTop: 40 }}>\r\n              <p>Upload Excel/CSV to import transactions:</p>\r\n              <input type=\"file\" accept=\".xlsx,.xls,.csv\" onChange={handleFileUpload} />\r\n            </div>\r\n            {/* --- Cards Row --- */}\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                gap: '32px',\r\n                width: '100%',\r\n                margin: '40px 0'\r\n              }}\r\n            >\r\n              <DashboardCard title=\"Accounts Receivable\" value={totalAR} color=\"#4caf50\" />\r\n              <DashboardCard title=\"Accounts Payable\" value={totalAP} color=\"#f44336\" />\r\n              <DashboardCard title=\"Profit\" value={totalProfit} color=\"#2196f3\" />\r\n              <DashboardCard title=\"Loss\" value={totalLoss} color=\"#ff9800\" />\r\n            </div>\r\n            {/* --- Existing CompanyDashboard --- */}\r\n            <CompanyDashboard\r\n              organization={selectedOrg}\r\n              selectedDept={selectedDept}\r\n              onDeptChange={setSelectedDept}\r\n              onProjectSelect={setSelectedProject}\r\n              onAddProject={setShowNewProjectForm}\r\n              onFileUpload={handleFileUpload}\r\n              onBack={() => setView('organizations')}\r\n              projects={rawProjects}\r\n              totals={totals}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrganizationDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}