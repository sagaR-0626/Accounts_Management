{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VivekReddyMeka\\\\Desktop\\\\Accounts_Management\\\\src\\\\Components\\\\Filters.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport \"../Styles/Filters.css\";\n\n// Returns a label for the selected period\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getPeriodLabel = selectedPeriod => {\n  const labels = {\n    month: \"Month\",\n    q1: \"Q1 (Jan-Mar)\",\n    q2: \"Q2 (Apr-Jun)\",\n    q3: \"Q3 (Jul-Sep)\",\n    q4: \"Q4 (Oct-Dec)\",\n    quarter: \"This Quarter\",\n    year: \"Year\",\n    all: \"All Time\",\n    custom: \"Custom Range\"\n  };\n  return labels[selectedPeriod] || \"This Month\";\n};\n\n// Example usage for filtering data by period (assuming you have a date field in your data)\nexport const filterByPeriod = (data, selectedPeriod, customRange, selectedDateRange) => {\n  if (!Array.isArray(data)) return [];\n  if (selectedPeriod === \"all\") return data;\n\n  // Find the most recent year in the data\n  const years = data.map(item => item.date && !isNaN(new Date(item.date)) ? new Date(item.date).getFullYear() : null).filter(Boolean);\n  const referenceYear = years.length ? Math.max(...years) : new Date().getFullYear();\n  const now = new Date(referenceYear, 0, 1); // Use Jan 1 of reference year\n\n  return data.filter(item => {\n    if (!item.date) return true;\n    const itemDate = new Date(item.date);\n    if (isNaN(itemDate)) {\n      console.log('Invalid date:', item.date, item);\n      return false;\n    }\n    // Debug log for filtering\n    console.log('Filtering:', item.date, '->', itemDate, 'SelectedPeriod:', selectedPeriod, 'Now:', now);\n    if (selectedPeriod === \"month\") {\n      return itemDate.getMonth() === now.getMonth() && itemDate.getFullYear() === now.getFullYear();\n    } else if (selectedPeriod === \"q1\") {\n      return itemDate.getMonth() >= 0 && itemDate.getMonth() <= 2 && itemDate.getFullYear() === now.getFullYear();\n    } else if (selectedPeriod === \"q2\") {\n      return itemDate.getMonth() >= 3 && itemDate.getMonth() <= 5 && itemDate.getFullYear() === now.getFullYear();\n    } else if (selectedPeriod === \"q3\") {\n      return itemDate.getMonth() >= 6 && itemDate.getMonth() <= 8 && itemDate.getFullYear() === now.getFullYear();\n    } else if (selectedPeriod === \"q4\") {\n      return itemDate.getMonth() >= 9 && itemDate.getMonth() <= 11 && itemDate.getFullYear() === now.getFullYear();\n    } else if (selectedPeriod === \"quarter\") {\n      const currentQuarter = Math.floor(now.getMonth() / 3);\n      const itemQuarter = Math.floor(itemDate.getMonth() / 3);\n      return itemQuarter === currentQuarter && itemDate.getFullYear() === now.getFullYear();\n    } else if (selectedPeriod === \"year\") {\n      return itemDate.getFullYear() === now.getFullYear();\n    } else if (selectedPeriod === \"custom\" && customRange) {\n      const {\n        startMonth,\n        startYear,\n        endMonth,\n        endYear\n      } = customRange;\n      if (startMonth === undefined || startYear === undefined || endMonth === undefined || endYear === undefined) return [];\n      const start = new Date(startYear, startMonth, 1);\n      const end = new Date(endYear, endMonth + 1, 0, 23, 59, 59, 999); // End of month\n      return data.filter(item => {\n        if (!item.date) return false;\n        const d = new Date(item.date);\n        if (isNaN(d)) return false;\n        return d >= start && d <= end;\n      });\n    } else if (selectedPeriod === \"dateRange\" && selectedDateRange) {\n      const {\n        startDate,\n        endDate\n      } = selectedDateRange;\n      return data.filter(item => {\n        if (!item.date) return false;\n        const d = new Date(item.date);\n        if (isNaN(d)) return false;\n        if (startDate && d < new Date(startDate)) return false;\n        if (endDate && d > new Date(endDate)) return false;\n        return true;\n      });\n    }\n    return true;\n  });\n};\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nconst Filters = ({\n  selectedCategory,\n  onCategoryChange,\n  selectedPeriod,\n  onPeriodChange,\n  categories,\n  customRange,\n  onCustomRangeChange,\n  pendingDateRange,\n  onPendingDateRangeChange,\n  selectedDateRange,\n  onApplyDateRange\n}) => {\n  _s();\n  const periods = [{\n    value: \"month\",\n    label: \"Month\"\n  }, {\n    value: \"q1\",\n    label: \"Q1 (Jan-Mar)\"\n  }, {\n    value: \"q2\",\n    label: \"Q2 (Apr-Jun)\"\n  }, {\n    value: \"q3\",\n    label: \"Q3 (Jul-Sep)\"\n  }, {\n    value: \"q4\",\n    label: \"Q4 (Oct-Dec)\"\n  }, {\n    value: \"quarter\",\n    label: \"This Quarter\"\n  }, {\n    value: \"year\",\n    label: \"Year\"\n  }, {\n    value: \"all\",\n    label: \"All Time\"\n  }, {\n    value: \"dateRange\",\n    label: \"Date Range\"\n  }];\n\n  // Flatten all items for year/month extraction\n  const allItems = useMemo(() => {\n    if (!categories) return [];\n    return categories.flatMap(cat => Array.isArray(cat.items) ? cat.items : []);\n  }, [categories]);\n\n  // Get available years and months from data\n  const availableYears = useMemo(() => {\n    const years = new Set();\n    allItems.forEach(item => {\n      if (item && item.date) {\n        const d = new Date(item.date);\n        if (!isNaN(d)) years.add(d.getFullYear());\n      }\n    });\n    return Array.from(years).sort((a, b) => a - b);\n  }, [allItems]);\n  const availableMonthsByYear = useMemo(() => {\n    const map = {};\n    allItems.forEach(item => {\n      if (item && item.date) {\n        const d = new Date(item.date);\n        if (!isNaN(d)) {\n          const y = d.getFullYear();\n          const m = d.getMonth();\n          if (!map[y]) map[y] = new Set();\n          map[y].add(m);\n        }\n      }\n    });\n    // Convert sets to arrays\n    Object.keys(map).forEach(y => map[y] = Array.from(map[y]).sort((a, b) => a - b));\n    return map;\n  }, [allItems]);\n\n  // Handle custom range change\n  const handleCustomRangeChange = (field, value) => {\n    onCustomRangeChange({\n      ...customRange,\n      [field]: value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-filters enhanced-filters\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"category-select\",\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"category-select\",\n          value: selectedCategory,\n          onChange: e => onCategoryChange(e.target.value),\n          className: \"filter-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"All Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: cat,\n            children: cat.charAt(0).toUpperCase() + cat.slice(1)\n          }, cat, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"period-select\",\n          children: \"Period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"period-select\",\n          value: selectedPeriod,\n          onChange: e => onPeriodChange(e.target.value),\n          className: \"filter-select\",\n          children: periods.map(period => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: period.value,\n            children: period.label\n          }, period.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_s(Filters, \"F5/taLQJaU9mCllATCPfQjXYFOs=\");\n_c = Filters;\nexport default Filters;\nvar _c;\n$RefreshReg$(_c, \"Filters\");","map":{"version":3,"names":["React","useMemo","jsxDEV","_jsxDEV","getPeriodLabel","selectedPeriod","labels","month","q1","q2","q3","q4","quarter","year","all","custom","filterByPeriod","data","customRange","selectedDateRange","Array","isArray","years","map","item","date","isNaN","Date","getFullYear","filter","Boolean","referenceYear","length","Math","max","now","itemDate","console","log","getMonth","currentQuarter","floor","itemQuarter","startMonth","startYear","endMonth","endYear","undefined","start","end","d","startDate","endDate","monthNames","Filters","selectedCategory","onCategoryChange","onPeriodChange","categories","onCustomRangeChange","pendingDateRange","onPendingDateRangeChange","onApplyDateRange","_s","periods","value","label","allItems","flatMap","cat","items","availableYears","Set","forEach","add","from","sort","a","b","availableMonthsByYear","y","m","Object","keys","handleCustomRangeChange","field","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","e","target","charAt","toUpperCase","slice","period","_c","$RefreshReg$"],"sources":["C:/Users/VivekReddyMeka/Desktop/Accounts_Management/src/Components/Filters.jsx"],"sourcesContent":["import React, { useMemo } from \"react\";\r\nimport \"../Styles/Filters.css\";\r\n\r\n// Returns a label for the selected period\r\n\r\nconst getPeriodLabel = (selectedPeriod) => {\r\n  const labels = {\r\n    month: \"Month\",\r\n    q1: \"Q1 (Jan-Mar)\",\r\n    q2: \"Q2 (Apr-Jun)\",\r\n    q3: \"Q3 (Jul-Sep)\",\r\n    q4: \"Q4 (Oct-Dec)\",\r\n    quarter: \"This Quarter\",\r\n    year: \"Year\",\r\n    all: \"All Time\",\r\n    custom: \"Custom Range\"\r\n  };\r\n  return labels[selectedPeriod] || \"This Month\";\r\n};\r\n\r\n// Example usage for filtering data by period (assuming you have a date field in your data)\r\nexport const filterByPeriod = (data, selectedPeriod, customRange, selectedDateRange) => {\r\n  if (!Array.isArray(data)) return [];\r\n  if (selectedPeriod === \"all\") return data;\r\n\r\n  // Find the most recent year in the data\r\n  const years = data\r\n    .map(item => item.date && !isNaN(new Date(item.date)) ? new Date(item.date).getFullYear() : null)\r\n    .filter(Boolean);\r\n  const referenceYear = years.length ? Math.max(...years) : new Date().getFullYear();\r\n  const now = new Date(referenceYear, 0, 1); // Use Jan 1 of reference year\r\n\r\n  return data.filter((item) => {\r\n    if (!item.date) return true;\r\n    const itemDate = new Date(item.date);\r\n    if (isNaN(itemDate)) {\r\n      console.log('Invalid date:', item.date, item);\r\n      return false;\r\n    }\r\n    // Debug log for filtering\r\n    console.log('Filtering:', item.date, '->', itemDate, 'SelectedPeriod:', selectedPeriod, 'Now:', now);\r\n    if (selectedPeriod === \"month\") {\r\n      return (\r\n        itemDate.getMonth() === now.getMonth() &&\r\n        itemDate.getFullYear() === now.getFullYear()\r\n      );\r\n    } else if (selectedPeriod === \"q1\") {\r\n      return itemDate.getMonth() >= 0 && itemDate.getMonth() <= 2 && itemDate.getFullYear() === now.getFullYear();\r\n    } else if (selectedPeriod === \"q2\") {\r\n      return itemDate.getMonth() >= 3 && itemDate.getMonth() <= 5 && itemDate.getFullYear() === now.getFullYear();\r\n    } else if (selectedPeriod === \"q3\") {\r\n      return itemDate.getMonth() >= 6 && itemDate.getMonth() <= 8 && itemDate.getFullYear() === now.getFullYear();\r\n    } else if (selectedPeriod === \"q4\") {\r\n      return itemDate.getMonth() >= 9 && itemDate.getMonth() <= 11 && itemDate.getFullYear() === now.getFullYear();\r\n    } else if (selectedPeriod === \"quarter\") {\r\n      const currentQuarter = Math.floor(now.getMonth() / 3);\r\n      const itemQuarter = Math.floor(itemDate.getMonth() / 3);\r\n      return (\r\n        itemQuarter === currentQuarter &&\r\n        itemDate.getFullYear() === now.getFullYear()\r\n      );\r\n    } else if (selectedPeriod === \"year\") {\r\n      return itemDate.getFullYear() === now.getFullYear();\r\n    } else if (selectedPeriod === \"custom\" && customRange) {\r\n      const { startMonth, startYear, endMonth, endYear } = customRange;\r\n      if (\r\n        startMonth === undefined || startYear === undefined ||\r\n        endMonth === undefined || endYear === undefined\r\n      ) return [];\r\n      const start = new Date(startYear, startMonth, 1);\r\n      const end = new Date(endYear, endMonth + 1, 0, 23, 59, 59, 999); // End of month\r\n      return data.filter(item => {\r\n        if (!item.date) return false;\r\n        const d = new Date(item.date);\r\n        if (isNaN(d)) return false;\r\n        return d >= start && d <= end;\r\n      });\r\n    } else if (selectedPeriod === \"dateRange\" && selectedDateRange) {\r\n      const { startDate, endDate } = selectedDateRange;\r\n      return data.filter(item => {\r\n        if (!item.date) return false;\r\n        const d = new Date(item.date);\r\n        if (isNaN(d)) return false;\r\n        if (startDate && d < new Date(startDate)) return false;\r\n        if (endDate && d > new Date(endDate)) return false;\r\n        return true;\r\n      });\r\n    }\r\n    return true;\r\n  });\r\n};\r\n\r\nconst monthNames = [\r\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n];\r\n\r\nconst Filters = ({\r\n  selectedCategory,\r\n  onCategoryChange,\r\n  selectedPeriod,\r\n  onPeriodChange,\r\n  categories,\r\n  customRange,\r\n  onCustomRangeChange,\r\n  pendingDateRange,\r\n  onPendingDateRangeChange,\r\n  selectedDateRange,\r\n  onApplyDateRange,\r\n}) => {\r\n  const periods = [\r\n    { value: \"month\", label: \"Month\" },\r\n    { value: \"q1\", label: \"Q1 (Jan-Mar)\" },\r\n    { value: \"q2\", label: \"Q2 (Apr-Jun)\" },\r\n    { value: \"q3\", label: \"Q3 (Jul-Sep)\" },\r\n    { value: \"q4\", label: \"Q4 (Oct-Dec)\" },\r\n    { value: \"quarter\", label: \"This Quarter\" },\r\n    \r\n    { value: \"year\", label: \"Year\" },\r\n   \r\n    { value: \"all\", label: \"All Time\" },\r\n    { value: \"dateRange\", label: \"Date Range\" }\r\n  ];\r\n\r\n  // Flatten all items for year/month extraction\r\n  const allItems = useMemo(() => {\r\n    if (!categories) return [];\r\n    return categories.flatMap(cat =>\r\n      Array.isArray(cat.items) ? cat.items : []\r\n    );\r\n  }, [categories]);\r\n\r\n  // Get available years and months from data\r\n  const availableYears = useMemo(() => {\r\n    const years = new Set();\r\n    allItems.forEach(item => {\r\n      if (item && item.date) {\r\n        const d = new Date(item.date);\r\n        if (!isNaN(d)) years.add(d.getFullYear());\r\n      }\r\n    });\r\n    return Array.from(years).sort((a, b) => a - b);\r\n  }, [allItems]);\r\n\r\n  const availableMonthsByYear = useMemo(() => {\r\n    const map = {};\r\n    allItems.forEach(item => {\r\n      if (item && item.date) {\r\n        const d = new Date(item.date);\r\n        if (!isNaN(d)) {\r\n          const y = d.getFullYear();\r\n          const m = d.getMonth();\r\n          if (!map[y]) map[y] = new Set();\r\n          map[y].add(m);\r\n        }\r\n      }\r\n    });\r\n    // Convert sets to arrays\r\n    Object.keys(map).forEach(y => map[y] = Array.from(map[y]).sort((a, b) => a - b));\r\n    return map;\r\n  }, [allItems]);\r\n\r\n  // Handle custom range change\r\n  const handleCustomRangeChange = (field, value) => {\r\n    onCustomRangeChange({\r\n      ...customRange,\r\n      [field]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"simple-filters enhanced-filters\">\r\n      <div className=\"filters-row\">\r\n        <div className=\"filter-block\">\r\n          <label htmlFor=\"category-select\">Category</label>\r\n          <select\r\n            id=\"category-select\"\r\n            value={selectedCategory}\r\n            onChange={(e) => onCategoryChange(e.target.value)}\r\n            className=\"filter-select\"\r\n          >\r\n            <option value=\"all\">All Categories</option>\r\n            {categories.map((cat) => (\r\n              <option key={cat} value={cat}>\r\n                {cat.charAt(0).toUpperCase() + cat.slice(1)}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"filter-block\">\r\n          <label htmlFor=\"period-select\">Period</label>\r\n          <select\r\n            id=\"period-select\"\r\n            value={selectedPeriod}\r\n            onChange={(e) => onPeriodChange(e.target.value)}\r\n            className=\"filter-select\"\r\n          >\r\n            {periods.map((period) => (\r\n              <option key={period.value} value={period.value}>\r\n                {period.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}